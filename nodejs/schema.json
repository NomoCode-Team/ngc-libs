{
  "type": "object",
  "properties": {
    "nodejs": {
      "description": "NodeJS namespace",
      "type": "object",
      "properties": {
        "package.json": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "JSON schema for NPM package.json files",
          "definitions": {
            "person": {
              "description": "A person who has been involved in creating or maintaining this package.",
              "type": [
                "object",
                "string"
              ],
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string",
                  "format": "uri"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            },
            "dependency": {
              "description": "Dependencies are specified with a simple hash of package name to version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "license": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "enum": [
                    "Apache-2.0",
                    "MIT",
                    "ISC",
                    "BSD-3-Clause",
                    "BSD-2-Clause",
                    "CC0-1.0",
                    "CDDL-1.1",
                    "LGPL-2.1-only",
                    "LGPL-2.1-or-later",
                    "LGPL-3.0-only",
                    "LGPL-3.0-or-later",
                    "EPL-1.0",
                    "EPL-2.0",
                    "MS-PL",
                    "UNLICENSED"
                  ]
                }
              ]
            },
            "scriptsInstallAfter": {
              "description": "Run AFTER the package is installed.",
              "type": "string",
              "x-intellij-language-injection": "Shell Script"
            },
            "scriptsPublishAfter": {
              "description": "Run AFTER the package is published.",
              "type": "string",
              "x-intellij-language-injection": "Shell Script"
            },
            "scriptsRestart": {
              "description": "Run by the 'npm restart' command. Note: 'npm restart' will run the stop and start scripts if no restart script is provided.",
              "type": "string",
              "x-intellij-language-injection": "Shell Script"
            },
            "scriptsStart": {
              "description": "Run by the 'npm start' command.",
              "type": "string",
              "x-intellij-language-injection": "Shell Script"
            },
            "scriptsStop": {
              "description": "Run by the 'npm stop' command.",
              "type": "string",
              "x-intellij-language-injection": "Shell Script"
            },
            "scriptsTest": {
              "description": "Run by the 'npm test' command.",
              "type": "string",
              "x-intellij-language-injection": "Shell Script"
            },
            "scriptsUninstallBefore": {
              "description": "Run BEFORE the package is uninstalled.",
              "type": "string",
              "x-intellij-language-injection": "Shell Script"
            },
            "scriptsVersionBefore": {
              "description": "Run BEFORE bump the package version.",
              "type": "string",
              "x-intellij-language-injection": "Shell Script"
            },
            "packageExportsEntryPath": {
              "type": [
                "string",
                "null"
              ],
              "description": "The module path that is resolved when this specifier is imported. Set to `null` to disallow importing this module.",
              "pattern": "^\\./"
            },
            "packageExportsEntryObject": {
              "type": "object",
              "description": "Used to specify conditional exports, note that Conditional exports are unsupported in older environments, so it's recommended to use the fallback array option if support for those environments is a concern.",
              "properties": {
                "require": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryOrFallback",
                  "description": "The module path that is resolved when this specifier is imported as a CommonJS module using the `require(...)` function."
                },
                "import": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryOrFallback",
                  "description": "The module path that is resolved when this specifier is imported as an ECMAScript module using an `import` declaration or the dynamic `import(...)` function."
                },
                "node": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryOrFallback",
                  "description": "The module path that is resolved when this environment is Node.js."
                },
                "default": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryOrFallback",
                  "description": "The module path that is resolved when no other export type matches."
                },
                "types": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryOrFallback",
                  "description": "The module path that is resolved for TypeScript types when this specifier is imported. Should be listed before other conditions."
                }
              },
              "patternProperties": {
                "^(?![\\.0-9]).": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryOrFallback",
                  "description": "The module path that is resolved when this environment matches the property name."
                }
              },
              "additionalProperties": false
            },
            "packageExportsEntry": {
              "oneOf": [
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryPath"
                },
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryObject"
                }
              ]
            },
            "packageExportsFallback": {
              "type": "array",
              "description": "Used to allow fallbacks in case this environment doesn't support the preceding entries.",
              "items": {
                "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntry"
              }
            },
            "packageExportsEntryOrFallback": {
              "oneOf": [
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntry"
                },
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsFallback"
                }
              ]
            },
            "fundingUrl": {
              "type": "string",
              "format": "uri",
              "description": "URL to a website with details about how to fund the package."
            },
            "fundingWay": {
              "type": "object",
              "description": "Used to inform about ways to help fund development of the package.",
              "properties": {
                "url": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/fundingUrl"
                },
                "type": {
                  "type": "string",
                  "description": "The type of funding or the platform through which funding can be provided, e.g. patreon, opencollective, tidelift or github."
                }
              },
              "additionalProperties": false,
              "required": [
                "url"
              ]
            }
          },
          "type": "object",
          "patternProperties": {
            "^_": {
              "description": "Any property starting with _ is valid.",
              "tsType": "any"
            }
          },
          "properties": {
            "name": {
              "description": "The name of the package.",
              "type": "string",
              "maxLength": 214,
              "minLength": 1,
              "pattern": "^(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)?/)?[a-z0-9-~][a-z0-9-._~]*$"
            },
            "version": {
              "description": "Version must be parseable by node-semver, which is bundled with npm as a dependency.",
              "type": "string"
            },
            "description": {
              "description": "This helps people discover your package, as it's listed in 'npm search'.",
              "type": "string"
            },
            "keywords": {
              "description": "This helps people discover your package as it's listed in 'npm search'.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "homepage": {
              "description": "The url to the project homepage.",
              "type": "string"
            },
            "bugs": {
              "description": "The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.",
              "type": [
                "object",
                "string"
              ],
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The url to your project's issue tracker.",
                  "format": "uri"
                },
                "email": {
                  "type": "string",
                  "description": "The email address to which issues should be reported.",
                  "format": "email"
                }
              }
            },
            "license": {
              "$ref": "#/properties/nodejs/properties/package.json/definitions/license",
              "description": "You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it."
            },
            "licenses": {
              "description": "DEPRECATED: Instead, use SPDX expressions, like this: { \"license\": \"ISC\" } or { \"license\": \"(MIT OR Apache-2.0)\" } see: 'https://docs.npmjs.com/files/package.json#license'.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/properties/nodejs/properties/package.json/definitions/license"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            },
            "author": {
              "$ref": "#/properties/nodejs/properties/package.json/definitions/person"
            },
            "contributors": {
              "description": "A list of people who contributed to this package.",
              "type": "array",
              "items": {
                "$ref": "#/properties/nodejs/properties/package.json/definitions/person"
              }
            },
            "maintainers": {
              "description": "A list of people who maintains this package.",
              "type": "array",
              "items": {
                "$ref": "#/properties/nodejs/properties/package.json/definitions/person"
              }
            },
            "files": {
              "description": "The 'files' field is an array of files to include in your project. If you name a folder in the array, then it will also include the files inside that folder.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "main": {
              "description": "The main field is a module ID that is the primary entry point to your program.",
              "type": "string"
            },
            "exports": {
              "description": "The \"exports\" field is used to restrict external access to non-exported module files, also enables a module to import itself using \"name\".",
              "oneOf": [
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryPath",
                  "description": "The module path that is resolved when the module specifier matches \"name\", shadows the \"main\" field."
                },
                {
                  "type": "object",
                  "properties": {
                    ".": {
                      "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryOrFallback",
                      "description": "The module path that is resolved when the module specifier matches \"name\", shadows the \"main\" field."
                    }
                  },
                  "patternProperties": {
                    "^\\./.+": {
                      "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryOrFallback",
                      "description": "The module path prefix that is resolved when the module specifier starts with \"name/\", set to \"./*\" to allow external modules to import any subpath."
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsEntryObject",
                  "description": "The module path that is resolved when the module specifier matches \"name\", shadows the \"main\" field."
                },
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/packageExportsFallback",
                  "description": "The module path that is resolved when the module specifier matches \"name\", shadows the \"main\" field."
                }
              ]
            },
            "bin": {
              "type": [
                "string",
                "object"
              ],
              "additionalProperties": {
                "type": "string"
              }
            },
            "type": {
              "description": "When set to \"module\", the type field allows a package to specify all .js files within are ES modules. If the \"type\" field is omitted or set to \"commonjs\", all .js files are treated as CommonJS.",
              "type": "string",
              "enum": [
                "commonjs",
                "module"
              ],
              "default": "commonjs"
            },
            "types": {
              "description": "Set the types property to point to your bundled declaration file.",
              "type": "string"
            },
            "typings": {
              "description": "Note that the \"typings\" field is synonymous with \"types\", and could be used as well.",
              "type": "string"
            },
            "typesVersions": {
              "description": "The \"typesVersions\" field is used since TypeScript 3.1 to support features that were only made available in newer TypeScript versions.",
              "type": "object",
              "additionalProperties": {
                "description": "Contains overrides for the TypeScript version that matches the version range matching the property key.",
                "type": "object",
                "properties": {
                  "*": {
                    "description": "Maps all file paths to the file paths specified in the array.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[^*]*(?:\\*[^*]*)?$"
                    }
                  }
                },
                "patternProperties": {
                  "^[^*]+$": {
                    "description": "Maps the file path matching the property key to the file paths specified in the array.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "^[^*]*\\*[^*]*$": {
                    "description": "Maps file paths matching the pattern specified in property key to file paths specified in the array.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[^*]*(?:\\*[^*]*)?$"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "man": {
              "type": [
                "array",
                "string"
              ],
              "description": "Specify either a single file or an array of filenames to put in place for the man program to find.",
              "items": {
                "type": "string"
              }
            },
            "directories": {
              "type": "object",
              "properties": {
                "bin": {
                  "description": "If you specify a 'bin' directory, then all the files in that folder will be used as the 'bin' hash.",
                  "type": "string"
                },
                "doc": {
                  "description": "Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday.",
                  "type": "string"
                },
                "example": {
                  "description": "Put example scripts in here. Someday, it might be exposed in some clever way.",
                  "type": "string"
                },
                "lib": {
                  "description": "Tell people where the bulk of your library is. Nothing special is done with the lib folder in any way, but it's useful meta info.",
                  "type": "string"
                },
                "man": {
                  "description": "A folder that is full of man pages. Sugar to generate a 'man' array by walking the folder.",
                  "type": "string"
                },
                "test": {
                  "type": "string"
                }
              }
            },
            "repository": {
              "description": "Specify the place where your code lives. This is helpful for people who want to contribute.",
              "type": [
                "object",
                "string"
              ],
              "properties": {
                "type": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "directory": {
                  "type": "string"
                }
              }
            },
            "funding": {
              "oneOf": [
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/fundingUrl"
                },
                {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/fundingWay"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/properties/nodejs/properties/package.json/definitions/fundingUrl"
                      },
                      {
                        "$ref": "#/properties/nodejs/properties/package.json/definitions/fundingWay"
                      }
                    ]
                  },
                  "minItems": 1,
                  "uniqueItems": true
                }
              ]
            },
            "scripts": {
              "description": "The 'scripts' member is an object hash of script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point.",
              "type": "object",
              "properties": {
                "lint": {
                  "type": "string",
                  "description": "Run code quality tools, e.g. ESLint, TSLint, etc."
                },
                "prepublish": {
                  "type": "string",
                  "description": "Run BEFORE the package is published (Also run on local npm install without any arguments)."
                },
                "prepare": {
                  "type": "string",
                  "description": "Run both BEFORE the package is packed and published, and on local npm install without any arguments. This is run AFTER prepublish, but BEFORE prepublishOnly."
                },
                "prepublishOnly": {
                  "type": "string",
                  "description": "Run BEFORE the package is prepared and packed, ONLY on npm publish."
                },
                "prepack": {
                  "type": "string",
                  "description": "run BEFORE a tarball is packed (on npm pack, npm publish, and when installing git dependencies)."
                },
                "postpack": {
                  "type": "string",
                  "description": "Run AFTER the tarball has been generated and moved to its final destination."
                },
                "publish": {
                  "type": "string",
                  "description": "Publishes a package to the registry so that it can be installed by name. See https://docs.npmjs.com/cli/v8/commands/npm-publish"
                },
                "postpublish": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsPublishAfter"
                },
                "preinstall": {
                  "type": "string",
                  "description": "Run BEFORE the package is installed."
                },
                "install": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsInstallAfter"
                },
                "postinstall": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsInstallAfter"
                },
                "preuninstall": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsUninstallBefore"
                },
                "uninstall": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsUninstallBefore"
                },
                "postuninstall": {
                  "type": "string",
                  "description": "Run AFTER the package is uninstalled."
                },
                "preversion": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsVersionBefore"
                },
                "version": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsVersionBefore"
                },
                "postversion": {
                  "type": "string",
                  "description": "Run AFTER bump the package version."
                },
                "pretest": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsTest"
                },
                "test": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsTest"
                },
                "posttest": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsTest"
                },
                "prestop": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsStop"
                },
                "stop": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsStop"
                },
                "poststop": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsStop"
                },
                "prestart": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsStart"
                },
                "start": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsStart"
                },
                "poststart": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsStart"
                },
                "prerestart": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsRestart"
                },
                "restart": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsRestart"
                },
                "postrestart": {
                  "$ref": "#/properties/nodejs/properties/package.json/definitions/scriptsRestart"
                },
                "serve": {
                  "type": "string",
                  "description": "Start dev server to serve application files"
                }
              },
              "additionalProperties": {
                "type": "string",
                "tsType": "string | undefined",
                "x-intellij-language-injection": "Shell Script"
              }
            },
            "config": {
              "description": "A 'config' hash can be used to set configuration parameters used in package scripts that persist across upgrades.",
              "type": "object",
              "additionalProperties": true
            },
            "dependencies": {
              "$ref": "#/properties/nodejs/properties/package.json/definitions/dependency"
            },
            "devDependencies": {
              "$ref": "#/properties/nodejs/properties/package.json/definitions/dependency"
            },
            "optionalDependencies": {
              "$ref": "#/properties/nodejs/properties/package.json/definitions/dependency"
            },
            "peerDependencies": {
              "$ref": "#/properties/nodejs/properties/package.json/definitions/dependency"
            },
            "peerDependenciesMeta": {
              "description": "When a user installs your package, warnings are emitted if packages specified in \"peerDependencies\" are not already installed. The \"peerDependenciesMeta\" field serves to provide more information on how your peer dependencies are utilized. Most commonly, it allows peer dependencies to be marked as optional. Metadata for this field is specified with a simple hash of the package name to a metadata object.",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "optional": {
                    "description": "Specifies that this peer dependency is optional and should not be installed automatically.",
                    "type": "boolean"
                  }
                }
              }
            },
            "bundledDependencies": {
              "description": "Array of package names that will be bundled when publishing the package.",
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "bundleDependencies": {
              "description": "DEPRECATED: This field is honored, but \"bundledDependencies\" is the correct field name.",
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "resolutions": {
              "description": "Resolutions is used to support selective version resolutions using yarn, which lets you define custom package versions or ranges inside your dependencies. For npm, use overrides instead. See: https://classic.yarnpkg.com/en/docs/selective-version-resolutions",
              "type": "object"
            },
            "overrides": {
              "description": "Overrides is used to support selective version overrides using npm, which lets you define custom package versions or ranges inside your dependencies. For yarn, use resolutions instead. See: https://docs.npmjs.com/cli/v9/configuring-npm/package-json#overrides",
              "type": "object"
            },
            "packageManager": {
              "description": "Defines which package manager is expected to be used when working on the current project. This field is currently experimental and needs to be opted-in; see https://nodejs.org/api/corepack.html",
              "type": "string",
              "pattern": "(npm|pnpm|yarn)@\\d+\\.\\d+\\.\\d+(-.+)?"
            },
            "engines": {
              "type": "object",
              "properties": {
                "node": {
                  "type": "string"
                }
              },
              "additionalProperties": {
                "type": "string"
              }
            },
            "engineStrict": {
              "type": "boolean"
            },
            "os": {
              "description": "Specify which operating systems your module will run on.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "cpu": {
              "description": "Specify that your code only runs on certain cpu architectures.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "preferGlobal": {
              "type": "boolean",
              "description": "DEPRECATED: This option used to trigger an npm warning, but it will no longer warn. It is purely there for informational purposes. It is now recommended that you install any binaries as local devDependencies wherever possible."
            },
            "private": {
              "description": "If set to true, then npm will refuse to publish it.",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "enum": [
                    "false",
                    "true"
                  ]
                }
              ]
            },
            "publishConfig": {
              "type": "object",
              "properties": {
                "access": {
                  "type": "string",
                  "enum": [
                    "public",
                    "restricted"
                  ]
                },
                "tag": {
                  "type": "string"
                },
                "registry": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "additionalProperties": true
            },
            "dist": {
              "type": "object",
              "properties": {
                "shasum": {
                  "type": "string"
                },
                "tarball": {
                  "type": "string"
                }
              }
            },
            "readme": {
              "type": "string"
            },
            "module": {
              "description": "An ECMAScript module ID that is the primary entry point to your program.",
              "type": "string"
            },
            "esnext": {
              "description": "A module ID with untranspiled code that is the primary entry point to your program.",
              "type": [
                "string",
                "object"
              ],
              "properties": {
                "main": {
                  "type": "string"
                },
                "browser": {
                  "type": "string"
                }
              },
              "additionalProperties": {
                "type": "string"
              }
            },
            "workspaces": {
              "description": "Allows packages within a directory to depend on one another using direct linking of local files. Additionally, dependencies within a workspace are hoisted to the workspace root when possible to reduce duplication. Note: It's also a good idea to set \"private\" to true when using this feature.",
              "anyOf": [
                {
                  "type": "array",
                  "description": "Workspace package paths. Glob patterns are supported.",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "packages": {
                      "type": "array",
                      "description": "Workspace package paths. Glob patterns are supported.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "nohoist": {
                      "type": "array",
                      "description": "Packages to block from hoisting to the workspace root. Currently only supported in Yarn only.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            },
            "jspm": {
              "$ref": "#/properties/nodejs/properties/package.json"
            },
            "eslintConfig": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "definitions": {
                "stringOrStringArray": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "rule": {
                  "oneOf": [
                    {
                      "description": "ESLint rule\n\n0 - turns the rule off\n1 - turn the rule on as a warning (doesn't affect exit code)\n2 - turn the rule on as an error (exit code is 1 when triggered)\n",
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 2
                    },
                    {
                      "description": "ESLint rule\n\n\"off\" - turns the rule off\n\"warn\" - turn the rule on as a warning (doesn't affect exit code)\n\"error\" - turn the rule on as an error (exit code is 1 when triggered)\n",
                      "type": "string",
                      "enum": [
                        "off",
                        "warn",
                        "error"
                      ]
                    },
                    {
                      "type": "array"
                    }
                  ]
                },
                "possibleErrors": {
                  "type": "object",
                  "properties": {
                    "comma-dangle": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow trailing commas"
                    },
                    "for-direction": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce \"for\" loop update clause moving the counter in the right direction"
                    },
                    "getter-return": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce return statements in getters"
                    },
                    "no-await-in-loop": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow await inside of loops"
                    },
                    "no-compare-neg-zero": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow comparing against -0"
                    },
                    "no-cond-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow assignment operators in conditional expressions"
                    },
                    "no-console": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of console"
                    },
                    "no-constant-condition": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow constant expressions in conditions"
                    },
                    "no-control-regex": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow control characters in regular expressions"
                    },
                    "no-debugger": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of debugger"
                    },
                    "no-dupe-args": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow duplicate arguments in function definitions"
                    },
                    "no-dupe-keys": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow duplicate keys in object literals"
                    },
                    "no-duplicate-case": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow duplicate case labels"
                    },
                    "no-empty": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow empty block statements"
                    },
                    "no-empty-character-class": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow empty character classes in regular expressions"
                    },
                    "no-ex-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow reassigning exceptions in catch clauses"
                    },
                    "no-extra-boolean-cast": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary boolean casts"
                    },
                    "no-extra-parens": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary parentheses"
                    },
                    "no-extra-semi": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary semicolons"
                    },
                    "no-func-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow reassigning function declarations"
                    },
                    "no-inner-declarations": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow function or var declarations in nested blocks"
                    },
                    "no-invalid-regexp": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow invalid regular expression strings in RegExp constructors"
                    },
                    "no-irregular-whitespace": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow irregular whitespace outside of strings and comments"
                    },
                    "no-negated-in-lhs": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow negating the left operand in in expressions (deprecated)"
                    },
                    "no-obj-calls": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow calling global object properties as functions"
                    },
                    "no-prototype-builtins": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow calling some Object.prototype methods directly on objects"
                    },
                    "no-regex-spaces": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow multiple spaces in regular expressions"
                    },
                    "no-sparse-arrays": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow sparse arrays"
                    },
                    "no-template-curly-in-string": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow template literal placeholder syntax in regular strings"
                    },
                    "no-unexpected-multiline": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow confusing multiline expressions"
                    },
                    "no-unreachable": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unreachable code after return, throw, continue, and break statements"
                    },
                    "no-unsafe-finally": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow control flow statements in finally blocks"
                    },
                    "no-unsafe-negation": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow negating the left operand of relational operators"
                    },
                    "use-isnan": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require calls to isNaN() when checking for NaN"
                    },
                    "valid-jsdoc": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce valid JSDoc comments"
                    },
                    "valid-typeof": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce comparing typeof expressions against valid strings"
                    }
                  }
                },
                "bestPractices": {
                  "type": "object",
                  "properties": {
                    "accessor-pairs": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce getter and setter pairs in objects"
                    },
                    "array-callback-return": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce return statements in callbacks of array methods"
                    },
                    "block-scoped-var": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce the use of variables within the scope they are defined"
                    },
                    "class-methods-use-this": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce that class methods utilize this"
                    },
                    "complexity": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a maximum cyclomatic complexity allowed in a program"
                    },
                    "consistent-return": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require return statements to either always or never specify values"
                    },
                    "curly": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent brace style for all control statements"
                    },
                    "default-case": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require default cases in switch statements"
                    },
                    "dot-location": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent newlines before and after dots"
                    },
                    "dot-notation": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce dot notation whenever possible"
                    },
                    "eqeqeq": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require the use of === and !=="
                    },
                    "guard-for-in": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require for-in loops to include an if statement"
                    },
                    "no-alert": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of alert, confirm, and prompt"
                    },
                    "no-caller": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of arguments.caller or arguments.callee"
                    },
                    "no-case-declarations": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow lexical declarations in case clauses"
                    },
                    "no-div-regex": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow division operators explicitly at the beginning of regular expressions"
                    },
                    "no-else-return": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow else blocks after return statements in if statements"
                    },
                    "no-empty-function": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow empty functions"
                    },
                    "no-empty-pattern": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow empty destructuring patterns"
                    },
                    "no-eq-null": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow null comparisons without type-checking operators"
                    },
                    "no-eval": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of eval()"
                    },
                    "no-extend-native": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow extending native types"
                    },
                    "no-extra-bind": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary calls to .bind()"
                    },
                    "no-extra-label": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary labels"
                    },
                    "no-fallthrough": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow fallthrough of case statements"
                    },
                    "no-floating-decimal": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow leading or trailing decimal points in numeric literals"
                    },
                    "no-global-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow assignments to native objects or read-only global variables"
                    },
                    "no-implicit-coercion": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow shorthand type conversions"
                    },
                    "no-implicit-globals": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow var and named function declarations in the global scope"
                    },
                    "no-implied-eval": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of eval()-like methods"
                    },
                    "no-invalid-this": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow this keywords outside of classes or class-like objects"
                    },
                    "no-iterator": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of the __iterator__ property"
                    },
                    "no-labels": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow labeled statements"
                    },
                    "no-lone-blocks": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary nested blocks"
                    },
                    "no-loop-func": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow function declarations and expressions inside loop statements"
                    },
                    "no-magic-numbers": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow magic numbers"
                    },
                    "no-multi-spaces": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow multiple spaces"
                    },
                    "no-multi-str": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow multiline strings"
                    },
                    "no-native-reassign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    },
                    "no-new": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow new operators outside of assignments or comparisons"
                    },
                    "no-new-func": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow new operators with the Function object"
                    },
                    "no-new-wrappers": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow new operators with the String, Number, and Boolean objects"
                    },
                    "no-octal": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow octal literals"
                    },
                    "no-octal-escape": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow octal escape sequences in string literals"
                    },
                    "no-param-reassign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow reassigning function parameters"
                    },
                    "no-proto": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of the __proto__ property"
                    },
                    "no-redeclare": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow var redeclaration"
                    },
                    "no-restricted-properties": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow certain properties on certain objects"
                    },
                    "no-return-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow assignment operators in return statements"
                    },
                    "no-return-await": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary return await"
                    },
                    "no-script-url": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow javascript: urls"
                    },
                    "no-self-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow assignments where both sides are exactly the same"
                    },
                    "no-self-compare": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow comparisons where both sides are exactly the same"
                    },
                    "no-sequences": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow comma operators"
                    },
                    "no-throw-literal": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow throwing literals as exceptions"
                    },
                    "no-unmodified-loop-condition": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unmodified loop conditions"
                    },
                    "no-unused-expressions": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unused expressions"
                    },
                    "no-unused-labels": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unused labels"
                    },
                    "no-useless-call": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary calls to .call() and .apply()"
                    },
                    "no-useless-concat": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary concatenation of literals or template literals"
                    },
                    "no-useless-escape": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary escape characters"
                    },
                    "no-useless-return": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow redundant return statements"
                    },
                    "no-void": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow void operators"
                    },
                    "no-warning-comments": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow specified warning terms in comments"
                    },
                    "no-with": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow with statements"
                    },
                    "prefer-promise-reject-errors": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require using Error objects as Promise rejection reasons"
                    },
                    "radix": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce the consistent use of the radix argument when using parseInt()"
                    },
                    "require-await": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow async functions which have no await expression"
                    },
                    "vars-on-top": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require var declarations be placed at the top of their containing scope"
                    },
                    "wrap-iife": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require parentheses around immediate function invocations"
                    },
                    "yoda": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or Disallow \"Yoda\" conditions"
                    }
                  }
                },
                "strictMode": {
                  "type": "object",
                  "properties": {
                    "strict": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "require or disallow strict mode directives"
                    }
                  }
                },
                "variables": {
                  "type": "object",
                  "properties": {
                    "init-declarations": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow initialization in var declarations"
                    },
                    "no-catch-shadow": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow catch clause parameters from shadowing variables in the outer scope"
                    },
                    "no-delete-var": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow deleting variables"
                    },
                    "no-label-var": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow labels that share a name with a variable"
                    },
                    "no-restricted-globals": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow specified global variables"
                    },
                    "no-shadow": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow var declarations from shadowing variables in the outer scope"
                    },
                    "no-shadow-restricted-names": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow identifiers from shadowing restricted names"
                    },
                    "no-undef": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of undeclared variables unless mentioned in /*global */ comments"
                    },
                    "no-undefined": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of undefined as an identifier"
                    },
                    "no-undef-init": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow initializing variables to undefined"
                    },
                    "no-unused-vars": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unused variables"
                    },
                    "no-use-before-define": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of variables before they are defined"
                    }
                  }
                },
                "nodeAndCommonJs": {
                  "type": "object",
                  "properties": {
                    "callback-return": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require return statements after callbacks"
                    },
                    "global-require": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require require() calls to be placed at top-level module scope"
                    },
                    "handle-callback-err": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require error handling in callbacks"
                    },
                    "no-buffer-constructor": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow use of the Buffer() constructor"
                    },
                    "no-mixed-requires": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow require calls to be mixed with regular var declarations"
                    },
                    "no-new-require": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow new operators with calls to require"
                    },
                    "no-path-concat": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow string concatenation with __dirname and __filename"
                    },
                    "no-process-env": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of process.env"
                    },
                    "no-process-exit": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the use of process.exit()"
                    },
                    "no-restricted-modules": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow specified modules when loaded by require"
                    },
                    "no-sync": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow synchronous methods"
                    }
                  }
                },
                "stylisticIssues": {
                  "type": "object",
                  "properties": {
                    "array-bracket-newline": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce line breaks after opening and before closing array brackets"
                    },
                    "array-bracket-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing inside array brackets"
                    },
                    "array-element-newline": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce line breaks after each array element"
                    },
                    "block-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing inside single-line blocks"
                    },
                    "brace-style": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent brace style for blocks"
                    },
                    "camelcase": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce camelcase naming convention"
                    },
                    "capitalized-comments": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce or disallow capitalization of the first letter of a comment"
                    },
                    "comma-dangle": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow trailing commas"
                    },
                    "comma-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing before and after commas"
                    },
                    "comma-style": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent comma style"
                    },
                    "computed-property-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing inside computed property brackets"
                    },
                    "consistent-this": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent naming when capturing the current execution context"
                    },
                    "eol-last": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce at least one newline at the end of files"
                    },
                    "func-call-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow spacing between function identifiers and their invocations"
                    },
                    "func-name-matching": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require function names to match the name of the variable or property to which they are assigned"
                    },
                    "func-names": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow named function expressions"
                    },
                    "func-style": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce the consistent use of either function declarations or expressions"
                    },
                    "function-call-argument-newline": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce line breaks between arguments of a function call"
                    },
                    "function-paren-newline": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent line breaks inside function parentheses"
                    },
                    "id-blacklist": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow specified identifiers"
                    },
                    "id-length": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce minimum and maximum identifier lengths"
                    },
                    "id-match": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require identifiers to match a specified regular expression"
                    },
                    "implicit-arrow-linebreak": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce the location of arrow function bodies"
                    },
                    "indent": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent indentation"
                    },
                    "indent-legacy": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent indentation (legacy, deprecated)"
                    },
                    "jsx-quotes": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce the consistent use of either double or single quotes in JSX attributes"
                    },
                    "key-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing between keys and values in object literal properties"
                    },
                    "keyword-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing before and after keywords"
                    },
                    "line-comment-position": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce position of line comments"
                    },
                    "lines-between-class-members": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow an empty line between class members"
                    },
                    "linebreak-style": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent linebreak style"
                    },
                    "lines-around-comment": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require empty lines around comments"
                    },
                    "lines-around-directive": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow newlines around directives"
                    },
                    "max-depth": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a maximum depth that blocks can be nested"
                    },
                    "max-len": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a maximum line length"
                    },
                    "max-lines": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a maximum number of lines per file"
                    },
                    "max-nested-callbacks": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a maximum depth that callbacks can be nested"
                    },
                    "max-params": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a maximum number of parameters in function definitions"
                    },
                    "max-statements": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a maximum number of statements allowed in function blocks"
                    },
                    "max-statements-per-line": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a maximum number of statements allowed per line"
                    },
                    "multiline-comment-style": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce a particular style for multiline comments"
                    },
                    "multiline-ternary": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce newlines between operands of ternary expressions"
                    },
                    "new-cap": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require constructor function names to begin with a capital letter"
                    },
                    "newline-after-var": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow an empty line after var declarations"
                    },
                    "newline-before-return": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require an empty line before return statements"
                    },
                    "newline-per-chained-call": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require a newline after each call in a method chain"
                    },
                    "new-parens": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require parentheses when invoking a constructor with no arguments"
                    },
                    "no-array-constructor": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow Array constructors"
                    },
                    "no-bitwise": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow bitwise operators"
                    },
                    "no-continue": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow continue statements"
                    },
                    "no-inline-comments": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow inline comments after code"
                    },
                    "no-lonely-if": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow if statements as the only statement in else blocks"
                    },
                    "no-mixed-operators": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow mixed binary operators"
                    },
                    "no-mixed-spaces-and-tabs": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow mixed spaces and tabs for indentation"
                    },
                    "no-multi-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow use of chained assignment expressions"
                    },
                    "no-multiple-empty-lines": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow multiple empty lines"
                    },
                    "no-negated-condition": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow negated conditions"
                    },
                    "no-nested-ternary": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow nested ternary expressions"
                    },
                    "no-new-object": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow Object constructors"
                    },
                    "no-plusplus": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow the unary operators ++ and --"
                    },
                    "no-restricted-syntax": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow specified syntax"
                    },
                    "no-spaced-func": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    },
                    "no-tabs": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow tabs in file"
                    },
                    "no-ternary": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow ternary operators"
                    },
                    "no-trailing-spaces": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow trailing whitespace at the end of lines"
                    },
                    "no-underscore-dangle": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow dangling underscores in identifiers"
                    },
                    "no-unneeded-ternary": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow ternary operators when simpler alternatives exist"
                    },
                    "no-whitespace-before-property": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow whitespace before properties"
                    },
                    "nonblock-statement-body-position": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce the location of single-line statements"
                    },
                    "object-curly-newline": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent line breaks inside braces"
                    },
                    "object-curly-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing inside braces"
                    },
                    "object-property-newline": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce placing object properties on separate lines"
                    },
                    "object-shorthand": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    },
                    "one-var": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce variables to be declared either together or separately in functions"
                    },
                    "one-var-declaration-per-line": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow newlines around var declarations"
                    },
                    "operator-assignment": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow assignment operator shorthand where possible"
                    },
                    "operator-linebreak": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent linebreak style for operators"
                    },
                    "padded-blocks": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow padding within blocks"
                    },
                    "padding-line-between-statements": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow padding lines between statements"
                    },
                    "quote-props": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require quotes around object literal property names"
                    },
                    "quotes": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce the consistent use of either backticks, double, or single quotes"
                    },
                    "require-jsdoc": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require JSDoc comments"
                    },
                    "semi": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow semicolons instead of ASI"
                    },
                    "semi-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing before and after semicolons"
                    },
                    "semi-style": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce location of semicolons"
                    },
                    "sort-keys": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Requires object keys to be sorted"
                    },
                    "sort-vars": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require variables within the same declaration block to be sorted"
                    },
                    "space-before-blocks": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing before blocks"
                    },
                    "space-before-function-paren": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing before function definition opening parenthesis"
                    },
                    "spaced-comment": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing after the // or /* in a comment"
                    },
                    "space-infix-ops": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require spacing around operators"
                    },
                    "space-in-parens": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing inside parentheses"
                    },
                    "space-unary-ops": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing before or after unary operators"
                    },
                    "switch-colon-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce spacing around colons of switch statements"
                    },
                    "template-tag-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow spacing between template tags and their literals"
                    },
                    "unicode-bom": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow Unicode byte order mark (BOM)"
                    },
                    "wrap-regex": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require parenthesis around regex literals"
                    }
                  }
                },
                "ecmaScript6": {
                  "type": "object",
                  "properties": {
                    "arrow-body-style": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require braces around arrow function bodies"
                    },
                    "arrow-parens": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require parentheses around arrow function arguments"
                    },
                    "arrow-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing before and after the arrow in arrow functions"
                    },
                    "constructor-super": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require super() calls in constructors"
                    },
                    "generator-star-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce consistent spacing around * operators in generator functions"
                    },
                    "no-class-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow reassigning class members"
                    },
                    "no-confusing-arrow": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow arrow functions where they could be confused with comparisons"
                    },
                    "no-const-assign": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow reassigning const variables"
                    },
                    "no-dupe-class-members": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow duplicate class members"
                    },
                    "no-duplicate-imports": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow duplicate module imports"
                    },
                    "no-new-symbol": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow new operators with the Symbol object"
                    },
                    "no-restricted-imports": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow specified modules when loaded by import"
                    },
                    "no-this-before-super": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow this/super before calling super() in constructors"
                    },
                    "no-useless-computed-key": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary computed property keys in object literals"
                    },
                    "no-useless-constructor": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow unnecessary constructors"
                    },
                    "no-useless-rename": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow renaming import, export, and destructured assignments to the same name"
                    },
                    "no-var": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require let or const instead of var"
                    },
                    "object-shorthand": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow method and property shorthand syntax for object literals"
                    },
                    "prefer-arrow-callback": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require arrow functions as callbacks"
                    },
                    "prefer-const": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require const declarations for variables that are never reassigned after declared"
                    },
                    "prefer-destructuring": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require destructuring from arrays and/or objects"
                    },
                    "prefer-numeric-literals": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Disallow parseInt() in favor of binary, octal, and hexadecimal literals"
                    },
                    "prefer-reflect": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require Reflect methods where applicable"
                    },
                    "prefer-rest-params": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require rest parameters instead of arguments"
                    },
                    "prefer-spread": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require spread operators instead of .apply()"
                    },
                    "prefer-template": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require template literals instead of string concatenation"
                    },
                    "require-yield": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require generator functions to contain yield"
                    },
                    "rest-spread-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce spacing between rest and spread operators and their expressions"
                    },
                    "sort-imports": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Enforce sorted import declarations within modules"
                    },
                    "symbol-description": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require symbol descriptions"
                    },
                    "template-curly-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow spacing around embedded expressions of template strings"
                    },
                    "yield-star-spacing": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule",
                      "description": "Require or disallow spacing around the * in yield* expressions"
                    }
                  }
                },
                "legacy": {
                  "type": "object",
                  "properties": {
                    "max-depth": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    },
                    "max-len": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    },
                    "max-params": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    },
                    "max-statements": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    },
                    "no-bitwise": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    },
                    "no-plusplus": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/rule"
                    }
                  }
                }
              },
              "properties": {
                "ecmaFeatures": {
                  "description": "By default, ESLint supports only ECMAScript 5 syntax. You can override that setting to enable support for ECMAScript 6 as well as JSX by using configuration settings.",
                  "type": "object",
                  "properties": {
                    "arrowFunctions": {
                      "type": "boolean"
                    },
                    "binaryLiterals": {
                      "type": "boolean"
                    },
                    "blockBindings": {
                      "type": "boolean"
                    },
                    "classes": {
                      "type": "boolean"
                    },
                    "defaultParams": {
                      "type": "boolean"
                    },
                    "destructuring": {
                      "type": "boolean"
                    },
                    "experimentalObjectRestSpread": {
                      "type": "boolean",
                      "description": "Enables support for the experimental object rest/spread properties (IMPORTANT: This is an experimental feature that may change significantly in the future. It's recommended that you do not write rules relying on this functionality unless you are willing to incur maintenance cost when it changes.)"
                    },
                    "forOf": {
                      "type": "boolean"
                    },
                    "generators": {
                      "type": "boolean"
                    },
                    "globalReturn": {
                      "type": "boolean",
                      "description": "allow return statements in the global scope"
                    },
                    "impliedStrict": {
                      "type": "boolean",
                      "description": "enable global strict mode (if ecmaVersion is 5 or greater)"
                    },
                    "jsx": {
                      "type": "boolean",
                      "description": "enable JSX"
                    },
                    "modules": {
                      "type": "boolean"
                    },
                    "objectLiteralComputedProperties": {
                      "type": "boolean"
                    },
                    "objectLiteralDuplicateProperties": {
                      "type": "boolean"
                    },
                    "objectLiteralShorthandMethods": {
                      "type": "boolean"
                    },
                    "objectLiteralShorthandProperties": {
                      "type": "boolean"
                    },
                    "octalLiterals": {
                      "type": "boolean"
                    },
                    "regexUFlag": {
                      "type": "boolean"
                    },
                    "regexYFlag": {
                      "type": "boolean"
                    },
                    "restParams": {
                      "type": "boolean"
                    },
                    "spread": {
                      "type": "boolean"
                    },
                    "superInFunctions": {
                      "type": "boolean"
                    },
                    "templateStrings": {
                      "type": "boolean"
                    },
                    "unicodeCodePointEscapes": {
                      "type": "boolean"
                    }
                  }
                },
                "env": {
                  "description": "An environment defines global variables that are predefined.",
                  "type": "object",
                  "properties": {
                    "amd": {
                      "type": "boolean",
                      "description": "defines require() and define() as global variables as per the amd spec"
                    },
                    "applescript": {
                      "type": "boolean",
                      "description": "AppleScript global variables"
                    },
                    "atomtest": {
                      "type": "boolean",
                      "description": "Atom test helper globals"
                    },
                    "browser": {
                      "type": "boolean",
                      "description": "browser global variables"
                    },
                    "commonjs": {
                      "type": "boolean",
                      "description": "CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack)"
                    },
                    "shared-node-browser": {
                      "type": "boolean",
                      "description": "Globals common to both Node and Browser"
                    },
                    "embertest": {
                      "type": "boolean",
                      "description": "Ember test helper globals"
                    },
                    "es6": {
                      "type": "boolean",
                      "description": "enable all ECMAScript 6 features except for modules"
                    },
                    "greasemonkey": {
                      "type": "boolean",
                      "description": "GreaseMonkey globals"
                    },
                    "jasmine": {
                      "type": "boolean",
                      "description": "adds all of the Jasmine testing global variables for version 1.3 and 2.0"
                    },
                    "jest": {
                      "type": "boolean",
                      "description": "Jest global variables"
                    },
                    "jquery": {
                      "type": "boolean",
                      "description": "jQuery global variables"
                    },
                    "meteor": {
                      "type": "boolean",
                      "description": "Meteor global variables"
                    },
                    "mocha": {
                      "type": "boolean",
                      "description": "adds all of the Mocha test global variables"
                    },
                    "mongo": {
                      "type": "boolean",
                      "description": "MongoDB global variables"
                    },
                    "nashorn": {
                      "type": "boolean",
                      "description": "Java 8 Nashorn global variables"
                    },
                    "node": {
                      "type": "boolean",
                      "description": "Node.js global variables and Node.js scoping"
                    },
                    "phantomjs": {
                      "type": "boolean",
                      "description": "PhantomJS global variables"
                    },
                    "prototypejs": {
                      "type": "boolean",
                      "description": "Prototype.js global variables"
                    },
                    "protractor": {
                      "type": "boolean",
                      "description": "Protractor global variables"
                    },
                    "qunit": {
                      "type": "boolean",
                      "description": "QUnit global variables"
                    },
                    "serviceworker": {
                      "type": "boolean",
                      "description": "Service Worker global variables"
                    },
                    "shelljs": {
                      "type": "boolean",
                      "description": "ShellJS global variables"
                    },
                    "webextensions": {
                      "type": "boolean",
                      "description": "WebExtensions globals"
                    },
                    "worker": {
                      "type": "boolean",
                      "description": "web workers global variables"
                    }
                  }
                },
                "extends": {
                  "description": "If you want to extend a specific configuration file, you can use the extends property and specify the path to the file. The path can be either relative or absolute.",
                  "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/stringOrStringArray"
                },
                "globals": {
                  "description": "Set each global variable name equal to true to allow the variable to be overwritten or false to disallow overwriting.",
                  "type": "object",
                  "additionalProperties": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "readonly",
                          "writable",
                          "off"
                        ]
                      },
                      {
                        "description": "The values false|\"readable\" and true|\"writeable\" are deprecated, they are equivalent to \"readonly\" and \"writable\", respectively.",
                        "type": "boolean"
                      }
                    ]
                  }
                },
                "noInlineConfig": {
                  "description": "Prevent comments from changing config or rules",
                  "type": "boolean"
                },
                "parser": {
                  "type": "string"
                },
                "parserOptions": {
                  "description": "The JavaScript language options to be supported",
                  "type": "object",
                  "properties": {
                    "ecmaFeatures": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/ecmaFeatures"
                    },
                    "ecmaVersion": {
                      "enum": [
                        3,
                        5,
                        6,
                        2015,
                        7,
                        2016,
                        8,
                        2017,
                        9,
                        2018,
                        10,
                        2019,
                        11,
                        2020,
                        12,
                        2021,
                        13,
                        2022,
                        14,
                        2023,
                        "latest"
                      ],
                      "default": 11,
                      "description": "Set to 3, 5, 6, 7, 8, 9, 10, 11 (default), 12, 13, 14 or \"latest\" to specify the version of ECMAScript syntax you want to use. You can also set to 2015 (same as 6), 2016 (same as 7), 2017 (same as 8), 2018 (same as 9), 2019 (same as 10), 2020 (same as 11), 2021 (same as 12), 2022 (same as 13) or 2023 (same as 14) to use the year-based naming. \"latest\" always enables the latest supported ECMAScript version."
                    },
                    "sourceType": {
                      "enum": [
                        "script",
                        "module"
                      ],
                      "default": "script",
                      "description": "set to \"script\" (default) or \"module\" if your code is in ECMAScript modules"
                    }
                  }
                },
                "plugins": {
                  "description": "ESLint supports the use of third-party plugins. Before using the plugin, you have to install it using npm.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "root": {
                  "description": "By default, ESLint will look for configuration files in all parent folders up to the root directory. This can be useful if you want all of your projects to follow a certain convention, but can sometimes lead to unexpected results. To limit ESLint to a specific project, set this to `true` in a configuration in the root of your project.",
                  "type": "boolean"
                },
                "ignorePatterns": {
                  "description": "Tell ESLint to ignore specific files and directories. Each value uses the same pattern as the `.eslintignore` file.",
                  "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/stringOrStringArray"
                },
                "rules": {
                  "description": "ESLint comes with a large number of rules. You can modify which rules your project uses either using configuration comments or configuration files.",
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/possibleErrors"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/bestPractices"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/strictMode"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/variables"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/nodeAndCommonJs"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/stylisticIssues"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/ecmaScript6"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/legacy"
                    }
                  ]
                },
                "settings": {
                  "description": "ESLint supports adding shared settings into configuration file. You can add settings object to ESLint configuration file and it will be supplied to every rule that will be executed. This may be useful if you are adding custom rules and want them to have access to the same information and be easily configurable.",
                  "type": "object"
                },
                "overrides": {
                  "type": "array",
                  "description": "Allows to override configuration for files and folders, specified by glob patterns",
                  "items": {
                    "type": "object",
                    "properties": {
                      "files": {
                        "description": "Glob pattern for files to apply 'overrides' configuration, relative to the directory of the config file",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "minItems": 1,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        ]
                      },
                      "extends": {
                        "description": "If you want to extend a specific configuration file, you can use the extends property and specify the path to the file. The path can be either relative or absolute.",
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/stringOrStringArray"
                      },
                      "excludedFiles": {
                        "description": "If a file matches any of the 'excludedFiles' glob patterns, the 'overrides' configuration won't apply",
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/definitions/stringOrStringArray"
                      },
                      "ecmaFeatures": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/ecmaFeatures"
                      },
                      "env": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/env"
                      },
                      "globals": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/globals"
                      },
                      "parser": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/parser"
                      },
                      "parserOptions": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/parserOptions"
                      },
                      "plugins": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/plugins"
                      },
                      "processor": {
                        "description": "To specify a processor, specify the plugin name and processor name joined by a forward slash",
                        "type": "string"
                      },
                      "rules": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/rules"
                      },
                      "settings": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/settings"
                      },
                      "overrides": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/eslintConfig/properties/overrides"
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "files"
                    ]
                  }
                }
              },
              "title": "JSON schema for ESLint configuration files",
              "type": "object"
            },
            "prettier": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "definitions": {
                "optionsDefinition": {
                  "type": "object",
                  "properties": {
                    "arrowParens": {
                      "description": "Include parentheses around a sole arrow function parameter.",
                      "default": "always",
                      "oneOf": [
                        {
                          "enum": [
                            "always"
                          ],
                          "description": "Always include parens. Example: `(x) => x`"
                        },
                        {
                          "enum": [
                            "avoid"
                          ],
                          "description": "Omit parens when possible. Example: `x => x`"
                        }
                      ]
                    },
                    "bracketSameLine": {
                      "description": "Put > of opening tags on the last line instead of on a new line.",
                      "default": false,
                      "type": "boolean"
                    },
                    "bracketSpacing": {
                      "description": "Print spaces between brackets.",
                      "default": true,
                      "type": "boolean"
                    },
                    "cursorOffset": {
                      "description": "Print (to stderr) where a cursor at the given position would move to after formatting.\nThis option cannot be used with --range-start and --range-end.",
                      "default": -1,
                      "type": "integer"
                    },
                    "editorconfig": {
                      "description": "Whether parse the .editorconfig file in your project and convert its properties to the corresponding Prettier configuration. This configuration will be overridden by .prettierrc, etc.",
                      "default": false,
                      "type": "boolean"
                    },
                    "embeddedLanguageFormatting": {
                      "description": "Control how Prettier formats quoted code embedded in the file.",
                      "default": "auto",
                      "oneOf": [
                        {
                          "enum": [
                            "auto"
                          ],
                          "description": "Format embedded code if Prettier can automatically identify it."
                        },
                        {
                          "enum": [
                            "off"
                          ],
                          "description": "Never automatically format embedded code."
                        }
                      ]
                    },
                    "endOfLine": {
                      "description": "Which end of line characters to apply.",
                      "default": "lf",
                      "oneOf": [
                        {
                          "enum": [
                            "lf"
                          ],
                          "description": "Line Feed only (\\n), common on Linux and macOS as well as inside git repos"
                        },
                        {
                          "enum": [
                            "crlf"
                          ],
                          "description": "Carriage Return + Line Feed characters (\\r\\n), common on Windows"
                        },
                        {
                          "enum": [
                            "cr"
                          ],
                          "description": "Carriage Return character only (\\r), used very rarely"
                        },
                        {
                          "enum": [
                            "auto"
                          ],
                          "description": "Maintain existing\n(mixed values within one file are normalised by looking at what's used after the first line)"
                        }
                      ]
                    },
                    "filepath": {
                      "description": "Specify the input filepath. This will be used to do parser inference.",
                      "type": "string"
                    },
                    "htmlWhitespaceSensitivity": {
                      "description": "How to handle whitespaces in HTML.",
                      "default": "css",
                      "oneOf": [
                        {
                          "enum": [
                            "css"
                          ],
                          "description": "Respect the default value of CSS display property."
                        },
                        {
                          "enum": [
                            "strict"
                          ],
                          "description": "Whitespaces are considered sensitive."
                        },
                        {
                          "enum": [
                            "ignore"
                          ],
                          "description": "Whitespaces are considered insensitive."
                        }
                      ]
                    },
                    "insertPragma": {
                      "description": "Insert @format pragma into file's first docblock comment.",
                      "default": false,
                      "type": "boolean"
                    },
                    "jsxSingleQuote": {
                      "description": "Use single quotes in JSX.",
                      "default": false,
                      "type": "boolean"
                    },
                    "parser": {
                      "description": "Which parser to use.",
                      "anyOf": [
                        {
                          "enum": [
                            "flow"
                          ],
                          "description": "Flow"
                        },
                        {
                          "enum": [
                            "babel"
                          ],
                          "description": "JavaScript"
                        },
                        {
                          "enum": [
                            "babel-flow"
                          ],
                          "description": "Flow"
                        },
                        {
                          "enum": [
                            "babel-ts"
                          ],
                          "description": "TypeScript"
                        },
                        {
                          "enum": [
                            "typescript"
                          ],
                          "description": "TypeScript"
                        },
                        {
                          "enum": [
                            "acorn"
                          ],
                          "description": "JavaScript"
                        },
                        {
                          "enum": [
                            "espree"
                          ],
                          "description": "JavaScript"
                        },
                        {
                          "enum": [
                            "meriyah"
                          ],
                          "description": "JavaScript"
                        },
                        {
                          "enum": [
                            "css"
                          ],
                          "description": "CSS"
                        },
                        {
                          "enum": [
                            "less"
                          ],
                          "description": "Less"
                        },
                        {
                          "enum": [
                            "scss"
                          ],
                          "description": "SCSS"
                        },
                        {
                          "enum": [
                            "json"
                          ],
                          "description": "JSON"
                        },
                        {
                          "enum": [
                            "json5"
                          ],
                          "description": "JSON5"
                        },
                        {
                          "enum": [
                            "json-stringify"
                          ],
                          "description": "JSON.stringify"
                        },
                        {
                          "enum": [
                            "graphql"
                          ],
                          "description": "GraphQL"
                        },
                        {
                          "enum": [
                            "markdown"
                          ],
                          "description": "Markdown"
                        },
                        {
                          "enum": [
                            "mdx"
                          ],
                          "description": "MDX"
                        },
                        {
                          "enum": [
                            "vue"
                          ],
                          "description": "Vue"
                        },
                        {
                          "enum": [
                            "yaml"
                          ],
                          "description": "YAML"
                        },
                        {
                          "enum": [
                            "glimmer"
                          ],
                          "description": "Ember / Handlebars"
                        },
                        {
                          "enum": [
                            "html"
                          ],
                          "description": "HTML"
                        },
                        {
                          "enum": [
                            "angular"
                          ],
                          "description": "Angular"
                        },
                        {
                          "enum": [
                            "lwc"
                          ],
                          "description": "Lightning Web Components"
                        },
                        {
                          "type": "string",
                          "description": "Custom parser"
                        }
                      ]
                    },
                    "pluginSearchDirs": {
                      "description": "Custom directory that contains prettier plugins in node_modules subdirectory.\nOverrides default behavior when plugins are searched relatively to the location of Prettier.\nMultiple values are accepted.",
                      "default": [],
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "enum": [
                            false
                          ],
                          "description": "Disable plugin autoloading."
                        }
                      ]
                    },
                    "plugins": {
                      "description": "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",
                      "default": [],
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "printWidth": {
                      "description": "The line length where Prettier will try wrap.",
                      "default": 80,
                      "type": "integer"
                    },
                    "proseWrap": {
                      "description": "How to wrap prose.",
                      "default": "preserve",
                      "oneOf": [
                        {
                          "enum": [
                            "always"
                          ],
                          "description": "Wrap prose if it exceeds the print width."
                        },
                        {
                          "enum": [
                            "never"
                          ],
                          "description": "Do not wrap prose."
                        },
                        {
                          "enum": [
                            "preserve"
                          ],
                          "description": "Wrap prose as-is."
                        }
                      ]
                    },
                    "quoteProps": {
                      "description": "Change when properties in objects are quoted.",
                      "default": "as-needed",
                      "oneOf": [
                        {
                          "enum": [
                            "as-needed"
                          ],
                          "description": "Only add quotes around object properties where required."
                        },
                        {
                          "enum": [
                            "consistent"
                          ],
                          "description": "If at least one property in an object requires quotes, quote all properties."
                        },
                        {
                          "enum": [
                            "preserve"
                          ],
                          "description": "Respect the input use of quotes in object properties."
                        }
                      ]
                    },
                    "rangeEnd": {
                      "description": "Format code ending at a given character offset (exclusive).\nThe range will extend forwards to the end of the selected statement.\nThis option cannot be used with --cursor-offset.",
                      "default": null,
                      "type": "integer"
                    },
                    "rangeStart": {
                      "description": "Format code starting at a given character offset.\nThe range will extend backwards to the start of the first line containing the selected statement.\nThis option cannot be used with --cursor-offset.",
                      "default": 0,
                      "type": "integer"
                    },
                    "requirePragma": {
                      "description": "Require either '@prettier' or '@format' to be present in the file's first docblock comment\nin order for it to be formatted.",
                      "default": false,
                      "type": "boolean"
                    },
                    "semi": {
                      "description": "Print semicolons.",
                      "default": true,
                      "type": "boolean"
                    },
                    "singleAttributePerLine": {
                      "description": "Enforce single attribute per line in HTML, Vue and JSX.",
                      "default": false,
                      "type": "boolean"
                    },
                    "singleQuote": {
                      "description": "Use single quotes instead of double quotes.",
                      "default": false,
                      "type": "boolean"
                    },
                    "tabWidth": {
                      "description": "Number of spaces per indentation level.",
                      "default": 2,
                      "type": "integer"
                    },
                    "trailingComma": {
                      "description": "Print trailing commas wherever possible when multi-line.",
                      "default": "es5",
                      "oneOf": [
                        {
                          "enum": [
                            "es5"
                          ],
                          "description": "Trailing commas where valid in ES5 (objects, arrays, etc.)"
                        },
                        {
                          "enum": [
                            "none"
                          ],
                          "description": "No trailing commas."
                        },
                        {
                          "enum": [
                            "all"
                          ],
                          "description": "Trailing commas wherever possible (including function arguments)."
                        }
                      ]
                    },
                    "useTabs": {
                      "description": "Indent with tabs instead of spaces.",
                      "default": false,
                      "type": "boolean"
                    },
                    "vueIndentScriptAndStyle": {
                      "description": "Indent script and style tags in Vue files.",
                      "default": false,
                      "type": "boolean"
                    }
                  }
                },
                "overridesDefinition": {
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "type": "array",
                      "description": "Provide a list of patterns to override prettier configuration.",
                      "items": {
                        "type": "object",
                        "required": [
                          "files"
                        ],
                        "properties": {
                          "files": {
                            "description": "Include these files in this override.",
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            ]
                          },
                          "excludeFiles": {
                            "description": "Exclude these files from this override.",
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            ]
                          },
                          "options": {
                            "type": "object",
                            "description": "The options to apply for this override.",
                            "$ref": "#/properties/nodejs/properties/package.json/properties/prettier/definitions/optionsDefinition"
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  }
                }
              },
              "oneOf": [
                {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/prettier/definitions/optionsDefinition"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/prettier/definitions/overridesDefinition"
                    }
                  ]
                },
                {
                  "type": "string"
                }
              ],
              "title": "Schema for .prettierrc"
            },
            "stylelint": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "definitions": {
                "allRules": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/atRule"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/block"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/color"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/comment"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/customMedia"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/customProperty"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/declaration"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/declarationBlock"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/font"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/function"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/generalSheet"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/keyframeDeclaration"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/length"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/mediaFeature"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/mediaQueryList"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/number"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/property"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/rootRule"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/rule"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/selector"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/selectorList"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/shorthandProperty"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/string"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/stylelintDisableComment"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/time"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/unit"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/value"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/valueList"
                    }
                  ]
                },
                "alwaysMultiLineRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "always-multi-line",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "always",
                              "always-multi-line",
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alwaysNeverRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "always",
                              "never",
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "arrayStringRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": [
                        "null",
                        "string"
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "array",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              [],
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "booleanRule": {
                  "default": true,
                  "type": [
                    "null",
                    "boolean",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "boolean",
                      "enum": [
                        true,
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "boolean",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "boolean",
                            "enum": [
                              true,
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "coreRule": {
                  "properties": {
                    "disableFix": {
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Custom message that will be used in errors and warnings",
                      "type": "string"
                    },
                    "reportDisables": {
                      "type": "boolean"
                    },
                    "severity": {
                      "description": "Message status",
                      "type": "string",
                      "enum": [
                        "warning",
                        "error"
                      ]
                    }
                  }
                },
                "integerRule": {
                  "type": [
                    "null",
                    "integer",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": [
                        "null",
                        "integer"
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "integer",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "integer",
                            "enum": [
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "lowerUpperRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "lower",
                        "upper",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "lower",
                              "upper",
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "newlineRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "always-multi-line",
                        "never-multi-line",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "always",
                              "always-multi-line",
                              "never-multi-line",
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "newlineSpaceRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "always-single-line",
                        "never-single-line",
                        "always-multi-line",
                        "never-multi-line",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "always",
                              "never",
                              "always-single-line",
                              "never-single-line",
                              "always-multi-line",
                              "never-multi-line",
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "newlineSpaceWithIgnoreRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "always-single-line",
                        "never-single-line",
                        "always-multi-line",
                        "never-multi-line",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "always",
                              "always-single-line",
                              "never-single-line",
                              "always-multi-line",
                              "never-multi-line",
                              {}
                            ]
                          },
                          {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ],
                            "properties": {
                              "ignoreAtRules": {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleStringOrArrayStringRule"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "objectRule": {
                  "type": [
                    "null",
                    "object",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "object",
                      "patternProperties": {
                        ".*": {
                          "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                        }
                      }
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ],
                            "patternProperties": {
                              "^((?!message|severity).)*$": {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "simpleArrayStringRule": {
                  "type": "array",
                  "minItems": 1,
                  "uniqueItems": true,
                  "items": {
                    "type": "string"
                  }
                },
                "simpleStringOrArrayStringRule": {
                  "type": [
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                    }
                  ]
                },
                "singleDoubleRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "single",
                        "double",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "single",
                              "double",
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "spaceRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "always",
                        "never",
                        "always-single-line",
                        "never-single-line",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "always",
                              "never",
                              "always-single-line",
                              "never-single-line",
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "stringRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": [
                        "null",
                        "string"
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              {}
                            ]
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                          }
                        ]
                      }
                    }
                  ]
                },
                "unitRule": {
                  "type": [
                    "null",
                    "string",
                    "array"
                  ],
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "enum": [
                        "em",
                        "ex",
                        "px",
                        "%",
                        "rem",
                        "vw",
                        "vh",
                        "vm",
                        "vmin",
                        "vmax",
                        "ch",
                        "in",
                        "cm",
                        "mm",
                        "q",
                        "pt",
                        "pc",
                        "deg",
                        "grad",
                        "rad",
                        "turn",
                        "ms",
                        "s",
                        "Hz",
                        "kHz",
                        "dpi",
                        "dpcm",
                        "dppx",
                        "fr",
                        []
                      ]
                    },
                    {
                      "type": "array",
                      "minItems": 1,
                      "uniqueItems": true,
                      "items": {
                        "type": [
                          "string",
                          "array",
                          "object"
                        ],
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "em",
                              "ex",
                              "px",
                              "%",
                              "rem",
                              "vw",
                              "vh",
                              "vm",
                              "vmin",
                              "vmax",
                              "ch",
                              "in",
                              "cm",
                              "mm",
                              "q",
                              "pt",
                              "pc",
                              "deg",
                              "grad",
                              "rad",
                              "turn",
                              "ms",
                              "s",
                              "Hz",
                              "kHz",
                              "dpi",
                              "dpcm",
                              "dppx",
                              "fr",
                              [],
                              {}
                            ]
                          },
                          {
                            "type": "array",
                            "uniqueItems": true,
                            "minItems": 1,
                            "items": {
                              "type": "string",
                              "enum": [
                                "em",
                                "ex",
                                "px",
                                "%",
                                "rem",
                                "vw",
                                "vh",
                                "vm",
                                "vmin",
                                "vmax",
                                "ch",
                                "in",
                                "cm",
                                "mm",
                                "q",
                                "pt",
                                "pc",
                                "deg",
                                "grad",
                                "rad",
                                "turn",
                                "ms",
                                "s",
                                "Hz",
                                "kHz",
                                "dpi",
                                "dpcm",
                                "dppx",
                                "fr"
                              ]
                            }
                          },
                          {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ],
                            "properties": {
                              "ignoreProperties": {
                                "description": "Ignore units in the values of declarations with the specified properties",
                                "type": "object",
                                "patternProperties": {
                                  "(em|ex|ch|vw|vh|cm|mm|in|pt|pc|px|rem|vmin|vmax|%)": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "atRule": {
                  "properties": {
                    "at-rule-blacklist": {
                      "description": "Specify a blacklist of disallowed at-rules",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    },
                    "at-rule-empty-line-before": {
                      "description": "Require or disallow an empty line before at-rules",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "except": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-same-name",
                                        "inside-block",
                                        "blockless-after-same-name-blockless",
                                        "blockless-after-blockless",
                                        "first-nested"
                                      ]
                                    }
                                  },
                                  "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-comment",
                                        "first-nested",
                                        "inside-block",
                                        "blockless-after-same-name-blockless",
                                        "blockless-after-blockless"
                                      ]
                                    }
                                  },
                                  "ignoreAtRules": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleStringOrArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "at-rule-name-case": {
                      "description": "Specify lowercase or uppercase for at-rules names",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/lowerUpperRule"
                    },
                    "at-rule-name-newline-after": {
                      "description": "Require a newline after at-rule names",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysMultiLineRule"
                    },
                    "at-rule-name-space-after": {
                      "description": "Require a single space after at-rule names",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "always-single-line",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "always-single-line",
                                  {}
                                ]
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "at-rule-no-unknown": {
                      "description": "Disallow unknown at-rules",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignoreAtRules": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "at-rule-no-vendor-prefix": {
                      "description": "Disallow vendor prefixes for at-rules",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "at-rule-semicolon-newline-after": {
                      "description": "Require a newline after the semicolon of at-rules",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  {}
                                ]
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "at-rule-whitelist": {
                      "description": "Specify a whitelist of allowed at-rules",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    }
                  }
                },
                "block": {
                  "properties": {
                    "block-closing-brace-empty-line-before": {
                      "description": "Require or disallow an empty line before the closing brace of blocks",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always-multi-line",
                            "never",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always-multi-line",
                                  "never",
                                  {}
                                ]
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "block-closing-brace-newline-after": {
                      "description": "Require a newline or disallow whitespace after the closing brace of blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineSpaceWithIgnoreRule"
                    },
                    "block-closing-brace-newline-before": {
                      "description": "Require a newline or disallow whitespace before the closing brace of blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "block-closing-brace-space-after": {
                      "description": "Require a single space or disallow whitespace after the closing brace of blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineSpaceRule"
                    },
                    "block-closing-brace-space-before": {
                      "description": "Require a single space or disallow whitespace before the closing brace of blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineSpaceRule"
                    },
                    "block-no-empty": {
                      "description": "Disallow empty blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "block-no-single-line": {
                      "description": "Disallow single-line blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "block-opening-brace-newline-after": {
                      "description": "Require a newline after the opening brace of blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "block-opening-brace-newline-before": {
                      "description": "Require a newline or disallow whitespace before the opening brace of blocks",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "always-single-line",
                            "never-single-line",
                            "always-multi-line",
                            "never-multi-line",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "always-single-line",
                                  "never-single-line",
                                  "always-multi-line",
                                  "never-multi-line",
                                  {}
                                ]
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "block-opening-brace-space-after": {
                      "description": "Require a single space or disallow whitespace after the opening brace of blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineSpaceRule"
                    },
                    "block-opening-brace-space-before": {
                      "description": "Require a single space or disallow whitespace before the opening brace of blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineSpaceWithIgnoreRule"
                    }
                  }
                },
                "color": {
                  "properties": {
                    "color-hex-case": {
                      "description": "Specify lowercase or uppercase for hex colors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/lowerUpperRule"
                    },
                    "color-hex-length": {
                      "description": "Specify short or long notation for hex colors",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "short",
                            "long",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "short",
                                  "long",
                                  {}
                                ]
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "color-named": {
                      "description": "Require (where possible) or disallow named colors",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always-where-possible",
                            "never",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always-where-possible",
                                  "never",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignore": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "color-no-hex": {
                      "description": "Disallow hex colors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "color-no-invalid-hex": {
                      "description": "Disallow invalid hex colors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    }
                  }
                },
                "comment": {
                  "properties": {
                    "comment-empty-line-before": {
                      "description": "Require or disallow an empty line before comments",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "except": {
                                    "description": "Reverse the primary option for comments that are nested and the first child of their parent node",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "first-nested"
                                      ]
                                    }
                                  },
                                  "ignore": {
                                    "description": "Don't require an empty line between comments",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "between-comments",
                                        "after-comment",
                                        "stylelint-commands"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "comment-no-empty": {
                      "description": "Disallow empty comments",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "comment-whitespace-inside": {
                      "description": "Require or disallow whitespace on the inside of comment markers",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "comment-word-blacklist": {
                      "description": "Specify a blacklist of disallowed words within comments",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    }
                  }
                },
                "customMedia": {
                  "properties": {
                    "custom-media-pattern": {
                      "description": "Specify a pattern for custom media query names",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/stringRule"
                    }
                  }
                },
                "customProperty": {
                  "properties": {
                    "custom-property-empty-line-before": {
                      "description": "Require or disallow an empty line before custom properties",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "except": {
                                    "description": "Reverse the primary option for custom properties that come after a comment, custom property or first child of their parent node",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-comment",
                                        "after-custom-property",
                                        "first-nested"
                                      ]
                                    }
                                  },
                                  "ignore": {
                                    "description": "Ignore custom properties that are preceded by comments or inside single-line blocks",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-comment",
                                        "inside-single-line-block"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "custom-property-no-outside-root": {
                      "description": "Disallow custom properties outside of `:root` rules",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "custom-property-pattern": {
                      "description": "Specify a pattern for custom properties",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/stringRule"
                    }
                  }
                },
                "declaration": {
                  "properties": {
                    "declaration-bang-space-after": {
                      "description": "Require a single space or disallow whitespace after the bang of declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "declaration-bang-space-before": {
                      "description": "Require a single space or disallow whitespace before the bang of declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "declaration-colon-newline-after": {
                      "description": "Require a newline or disallow whitespace after the colon of declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysMultiLineRule"
                    },
                    "declaration-colon-space-after": {
                      "description": "Require a single space or disallow whitespace after the colon of declarations",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "always-single-line",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never",
                                  "always-single-line",
                                  {}
                                ]
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "declaration-colon-space-before": {
                      "description": "Require a single space or disallow whitespace before the colon of declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "declaration-empty-line-before": {
                      "description": "Require or disallow an empty line before declarations",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "except": {
                                    "type": "array",
                                    "minItems": 1,
                                    "uniqueItems": true,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-comment",
                                        "after-declaration",
                                        "first-nested"
                                      ]
                                    }
                                  },
                                  "ignore": {
                                    "type": "array",
                                    "minItems": 1,
                                    "uniqueItems": true,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-comment",
                                        "after-declaration",
                                        "inside-single-line-block"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "declaration-no-important": {
                      "description": "Disallow `!important` within declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "declaration-property-unit-blacklist": {
                      "description": "Specify a blacklist of disallowed property and unit pairs within declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/objectRule"
                    },
                    "declaration-property-unit-whitelist": {
                      "description": "Specify a whitelist of allowed property and unit pairs within declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/objectRule"
                    },
                    "declaration-property-value-blacklist": {
                      "description": "Specify a blacklist of disallowed property and value pairs within declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/objectRule"
                    },
                    "declaration-property-value-whitelist": {
                      "description": "Specify a whitelist of allowed property and value pairs within declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/objectRule"
                    }
                  }
                },
                "declarationBlock": {
                  "properties": {
                    "declaration-block-no-duplicate-properties": {
                      "description": "Disallow duplicate properties within declaration blocks",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignore": {
                                    "type": "array",
                                    "minItems": 1,
                                    "uniqueItems": true,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "consecutive-duplicates",
                                        "consecutive-duplicates-with-different-values",
                                        "consecutive-duplicates-with-different-syntaxes",
                                        "consecutive-duplicates-with-same-prefixless-values"
                                      ]
                                    }
                                  },
                                  "ignoreProperties": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "declaration-block-no-ignored-properties": {
                      "description": "Disallow property values that are ignored due to another property value in the same rule",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "declaration-block-no-redundant-longhand-properties": {
                      "description": "Disallow longhand properties that can be combined into one shorthand property",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignoreShorthands": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "declaration-block-no-shorthand-property-overrides": {
                      "description": "Disallow shorthand properties that override related longhand properties",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "declaration-block-properties-order": {
                      "description": "Specify the order of properties within declaration blocks",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "alphabetical",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 1,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "array",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "alphabetical",
                                  [],
                                  {}
                                ]
                              },
                              {
                                "type": "string"
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "dependencies": {
                                  "order": [
                                    "properties"
                                  ],
                                  "properties": [
                                    "order"
                                  ]
                                },
                                "properties": {
                                  "unspecified": {
                                    "description": "These options only apply if you've defined your own array of properties",
                                    "type": "string",
                                    "enum": [
                                      "top",
                                      "bottom",
                                      "bottomAlphabetical",
                                      "ignore"
                                    ]
                                  },
                                  "order": {
                                    "type": "string",
                                    "enum": [
                                      "strict",
                                      "flexible"
                                    ]
                                  },
                                  "properties": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "declaration-block-semicolon-newline-after": {
                      "description": "Require a newline or disallow whitespace after the semicolons of declaration blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "declaration-block-semicolon-newline-before": {
                      "description": "Require a newline or disallow whitespace before the semicolons of declaration blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "declaration-block-semicolon-space-after": {
                      "description": "Require a single space or disallow whitespace after the semicolons of declaration blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "declaration-block-semicolon-space-before": {
                      "description": "Require a single space or disallow whitespace before the semicolons of declaration blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "declaration-block-single-line-max-declarations": {
                      "description": "Limit the number of declaration within a single line declaration block",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/integerRule"
                    },
                    "declaration-block-trailing-semicolon": {
                      "description": "Require or disallow a trailing semicolon within declaration blocks",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    }
                  }
                },
                "font": {
                  "properties": {
                    "font-family-name-quotes": {
                      "description": "Specify whether or not quotation marks should be used around font family names",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always-where-required",
                            "always-where-recommended",
                            "always-unless-keyword",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always-where-required",
                                  "always-where-recommended",
                                  "always-unless-keyword",
                                  {}
                                ]
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "font-weight-notation": {
                      "description": "Require numeric or named (where possible) `font-weight` values. Also, when named values are expected, require only valid names",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "numeric",
                            "named-where-possible",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "numeric",
                                  "named-where-possible",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "relative"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "function": {
                  "properties": {
                    "function-blacklist": {
                      "description": "Specify a blacklist of disallowed functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    },
                    "function-calc-no-unspaced-operator": {
                      "description": "Disallow an unspaced operator within `calc` functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "function-comma-newline-after": {
                      "description": "Require a newline or disallow whitespace after the commas of functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "function-comma-newline-before": {
                      "description": "Require a newline or disallow whitespace before the commas of functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "function-comma-space-after": {
                      "description": "Require a single space or disallow whitespace after the commas of functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "function-comma-space-before": {
                      "description": "Require a single space or disallow whitespace before the commas of functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "function-linear-gradient-no-nonstandard-direction": {
                      "description": "Disallow direction values in `linear-gradient()` calls that are not valid according to the standard syntax",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "function-max-empty-lines": {
                      "description": "Limit the number of adjacent empty lines within functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/integerRule"
                    },
                    "function-name-case": {
                      "description": "Specify lowercase or uppercase for function names",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "lower",
                            "upper",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "lower",
                                  "upper",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "description": "Ignore case of function names",
                                "properties": {
                                  "ignoreFunctions": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "function-parentheses-newline-inside": {
                      "description": "Require a newline or disallow whitespace on the inside of the parentheses of functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "function-parentheses-space-inside": {
                      "description": "Require a single space or disallow whitespace on the inside of the parentheses of functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "function-url-data-uris": {
                      "description": "Require or disallow data URIs for urls",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "function-url-no-scheme-relative": {
                      "description": "Disallow scheme-relative urls",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "function-url-quotes": {
                      "description": "Require or disallow quotes for urls",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "function-url-scheme-whitelist": {
                      "description": "Specify a whitelist of allowed url schemes",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    },
                    "function-whitelist": {
                      "description": "Specify a whitelist of allowed functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    },
                    "function-whitespace-after": {
                      "description": "Require or disallow whitespace after functions",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    }
                  }
                },
                "generalSheet": {
                  "properties": {
                    "indentation": {
                      "description": "Specify indentation",
                      "type": [
                        "null",
                        "integer",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": [
                            "null",
                            "integer"
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "tab",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 1,
                          "uniqueItems": true,
                          "items": {
                            "type": "integer"
                          }
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "integer",
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "tab",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "indentInsideParens": {
                                    "description": "If `true`, the closing brace of a block (rule or at-rule) will be expected at the same indentation level as the block's inner nodes",
                                    "type": "string",
                                    "enum": [
                                      "twice",
                                      "once-at-root-twice-in-block"
                                    ]
                                  },
                                  "except": {
                                    "description": "Do not indent for these things",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "block",
                                        "param",
                                        "value"
                                      ]
                                    }
                                  },
                                  "ignore": {
                                    "description": "Ignore the indentation inside parentheses",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "inside-parens",
                                        "param",
                                        "value"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "max-empty-lines": {
                      "description": "Limit the number of adjacent empty lines",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/integerRule"
                    },
                    "max-line-length": {
                      "description": "Limit the length of a line",
                      "type": [
                        "null",
                        "integer",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": [
                            "null",
                            "integer"
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "integer",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignore": {
                                    "type": [
                                      "string",
                                      "array"
                                    ],
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "enum": [
                                          "non-comments",
                                          "comments"
                                        ]
                                      },
                                      {
                                        "type": "array",
                                        "uniqueItems": true,
                                        "minItems": 1,
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "non-comments",
                                            "comments"
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "max-nesting-depth": {
                      "description": "Limit the allowed nesting depth",
                      "type": [
                        "null",
                        "integer",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": [
                            "null",
                            "integer"
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "integer",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "blockless-at-rules",
                                        "pseudo-classes"
                                      ]
                                    }
                                  },
                                  "ignoreAtRules": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "no-browser-hacks": {
                      "description": "Disallow browser hacks that are irrelevant to the browsers you are targeting",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "browsers": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleStringOrArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "no-descending-specificity": {
                      "description": "Disallow selectors of lower specificity from coming after overriding selectors of higher specificity",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "no-duplicate-selectors": {
                      "description": "Disallow duplicate selectors within a stylesheet",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "no-empty-source": {
                      "description": "Disallow empty sources",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "no-eol-whitespace": {
                      "description": "Disallow end-of-line whitespace",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "empty-lines"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "no-extra-semicolons": {
                      "description": "Disallow extra semicolons",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "no-indistinguishable-colors": {
                      "description": "Disallow colors that are suspiciously close to being identical",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "threshold": {
                                    "type": "integer",
                                    "default": 3,
                                    "minimum": 0,
                                    "maximum": 100
                                  },
                                  "ignore": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  },
                                  "whitelist": {
                                    "description": "An array of color pairs to ignore. Each pair is an array with two items",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "no-invalid-double-slash-comments": {
                      "description": "Disallow double-slash comments `(//...)` which are not supported by CSS and could lead to unexpected results",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "no-missing-end-of-source-newline": {
                      "description": "Disallow missing end-of-source newlines",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "no-unknown-animations": {
                      "description": "Disallow animation names that do not correspond to a `@keyframes` declaration",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "unicode-bom": {
                      "description": "Require or disallow Unicode BOM",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "no-unsupported-browser-features": {
                      "description": "Disallow features that are unsupported by the browsers that you are targeting",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "browsers": {
                                    "type": "string"
                                  },
                                  "ignore": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleStringOrArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "keyframeDeclaration": {
                  "properties": {
                    "keyframe-declaration-no-important": {
                      "description": "Disallow !important within keyframe declarations",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    }
                  }
                },
                "length": {
                  "properties": {
                    "length-zero-no-unit": {
                      "description": "Disallow units for zero lengths",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    }
                  }
                },
                "mediaFeature": {
                  "properties": {
                    "media-feature-colon-space-after": {
                      "description": "Require a single space or disallow whitespace after the colon in media features",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "media-feature-colon-space-before": {
                      "description": "Require a single space or disallow whitespace before the colon in media features",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "media-feature-name-case": {
                      "description": "Specify lowercase or uppercase for media feature names",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/lowerUpperRule"
                    },
                    "media-feature-name-no-unknown": {
                      "description": "Disallow unknown media feature names",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignoreMediaFeatureNames": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "media-feature-name-no-vendor-prefix": {
                      "description": "Disallow vendor prefixes for media feature names",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "media-feature-no-missing-punctuation": {
                      "description": "Disallow missing punctuation for non-boolean media features",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "media-feature-parentheses-space-inside": {
                      "description": "Require a single space or disallow whitespace on the inside of the parentheses within media features",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "media-feature-range-operator-space-after": {
                      "description": "Require a single space or disallow whitespace after the range operator in media features",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "media-feature-range-operator-space-before": {
                      "description": "Require a single space or disallow whitespace before the range operator in media features",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    }
                  }
                },
                "mediaQueryList": {
                  "properties": {
                    "media-query-list-comma-newline-after": {
                      "description": "Require a newline or disallow whitespace after the commas of media query lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "media-query-list-comma-newline-before": {
                      "description": "Require a newline or disallow whitespace before the commas of media query lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "media-query-list-comma-space-after": {
                      "description": "Require a single space or disallow whitespace after the commas of media query lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "media-query-list-comma-space-before": {
                      "description": "Require a single space or disallow whitespace before the commas of media query lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    }
                  }
                },
                "number": {
                  "properties": {
                    "number-leading-zero": {
                      "description": "Require or disallow a leading zero for fractional numbers less than 1",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "number-max-precision": {
                      "description": "Limit the number of decimal places allowed in numbers",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/integerRule"
                    },
                    "number-no-trailing-zeros": {
                      "description": "Disallow trailing zeros in numbers",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    }
                  }
                },
                "property": {
                  "properties": {
                    "property-blacklist": {
                      "description": "Specify a blacklist of disallowed properties",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    },
                    "property-case": {
                      "description": "Specify lowercase or uppercase for properties",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/lowerUpperRule"
                    },
                    "property-no-unknown": {
                      "description": "Disallow unknown properties",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignoreProperties": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  },
                                  "checkPrefixed": {
                                    "description": "If `true`, this rule will check vendor-prefixed properties",
                                    "type": "boolean"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "property-no-vendor-prefix": {
                      "description": "Disallow vendor prefixes for properties",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "property-whitelist": {
                      "description": "Specify a whitelist of allowed properties",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    }
                  }
                },
                "rootRule": {
                  "properties": {
                    "root-no-standard-properties": {
                      "description": "Disallow standard properties inside `:root` rules",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    }
                  }
                },
                "rule": {
                  "properties": {
                    "rule-nested-empty-line-before": {
                      "description": "Require or disallow an empty line before nested rules",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "always-multi-line",
                            "never-multi-line",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never",
                                  "always-multi-line",
                                  "never-multi-line",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "except": {
                                    "description": "Reverse the primary option if the rule is the first in a block",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "first-nested"
                                      ]
                                    }
                                  },
                                  "ignore": {
                                    "description": "Ignore rules that come after a comment",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-comment"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "rule-non-nested-empty-line-before": {
                      "description": "Require or disallow an empty line before non-nested rules",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "never",
                            "always-multi-line",
                            "never-multi-line",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always",
                                  "never",
                                  "always-multi-line",
                                  "never-multi-line",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "except": {
                                    "description": "Reverse the primary option if the rule is the first in a block",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-single-line-comment"
                                      ]
                                    }
                                  },
                                  "ignore": {
                                    "description": "Ignore rules that come after a comment",
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "after-comment"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "selector": {
                  "properties": {
                    "selector-attribute-brackets-space-inside": {
                      "description": "Require a single space or disallow whitespace on the inside of the brackets within attribute selector",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "selector-attribute-operator-blacklist": {
                      "description": "Specify a blacklist of disallowed attribute operators",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    },
                    "selector-attribute-operator-space-after": {
                      "description": "Require a single space or disallow whitespace after operators within attribute selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "selector-attribute-operator-space-before": {
                      "description": "Require a single space or disallow whitespace before operators within attribute selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "selector-attribute-operator-whitelist": {
                      "description": "Specify a whitelist of allowed attribute operators",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    },
                    "selector-attribute-quotes": {
                      "description": "Require or disallow quotes for attribute values",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "selector-class-pattern": {
                      "description": "Specify a pattern for class selectors",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": [
                            "null",
                            "string"
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "resolveNestedSelectors": {
                                    "description": "This option will resolve nested selectors with `&` interpolation",
                                    "type": "boolean",
                                    "default": false
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "selector-combinator-space-after": {
                      "description": "Require a single space or disallow whitespace after the combinators of selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "selector-combinator-space-before": {
                      "description": "Require a single space or disallow whitespace before the combinators of selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "selector-descendant-combinator-no-non-space": {
                      "description": "Disallow non-space characters for descendant combinators of selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "selector-id-pattern": {
                      "description": "Specify a pattern for id selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/stringRule"
                    },
                    "selector-max-compound-selectors": {
                      "description": "Limit the number of compound selectors in a selector",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/integerRule"
                    },
                    "selector-max-specificity": {
                      "description": "Limit the specificity of selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/stringRule"
                    },
                    "selector-nested-pattern": {
                      "description": "Specify a pattern for the selectors of rules nested within rules",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/stringRule"
                    },
                    "selector-no-attribute": {
                      "description": "Disallow attribute selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "selector-no-combinator": {
                      "description": "Disallow combinators in selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "selector-no-id": {
                      "description": "Disallow id selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "selector-no-qualifying-type": {
                      "description": "Disallow qualifying a selector by type",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "attribute",
                                        "class",
                                        "id"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "selector-no-type": {
                      "description": "Disallow type selectors",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignore": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "compounded",
                                        "descendant"
                                      ]
                                    }
                                  },
                                  "ignoreTypes": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "selector-no-universal": {
                      "description": "Disallow the universal selector",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "selector-no-vendor-prefix": {
                      "description": "Disallow vendor prefixes for selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "selector-pseudo-class-case": {
                      "description": "Specify lowercase or uppercase for pseudo-class selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/lowerUpperRule"
                    },
                    "selector-pseudo-class-no-unknown": {
                      "description": "Disallow unknown pseudo-class selectors",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignorePseudoClasses": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "selector-pseudo-class-parentheses-space-inside": {
                      "description": "Require a single space or disallow whitespace on the inside of the parentheses within pseudo-class selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/alwaysNeverRule"
                    },
                    "selector-pseudo-class-whitelist": {
                      "description": "Specify a whitelist of allowed pseudo-class selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/arrayStringRule"
                    },
                    "selector-pseudo-element-case": {
                      "description": "Specify lowercase or uppercase for pseudo-element selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/lowerUpperRule"
                    },
                    "selector-pseudo-element-colon-notation": {
                      "description": "Specify single or double colon notation for applicable pseudo-elements",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/singleDoubleRule"
                    },
                    "selector-pseudo-element-no-unknown": {
                      "description": "Disallow unknown pseudo-element selectors",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignorePseudoElements": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "selector-root-no-composition": {
                      "description": "Disallow the composition of :root in selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "selector-type-case": {
                      "description": "Specify lowercase or uppercase for type selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/lowerUpperRule"
                    },
                    "selector-type-no-unknown": {
                      "description": "Disallow unknown type selectors",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignoreTypes": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "selector-max-empty-lines": {
                      "description": "Limit the number of adjacent empty lines within selectors",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/integerRule"
                    }
                  }
                },
                "selectorList": {
                  "properties": {
                    "selector-list-comma-newline-after": {
                      "description": "Require a newline or disallow whitespace after the commas of selector lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "selector-list-comma-newline-before": {
                      "description": "Require a newline or disallow whitespace before the commas of selector lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "selector-list-comma-space-after": {
                      "description": "Require a single space or disallow whitespace after the commas of selector lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "selector-list-comma-space-before": {
                      "description": "Require a single space or disallow whitespace before the commas of selector lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    }
                  }
                },
                "shorthandProperty": {
                  "properties": {
                    "shorthand-property-no-redundant-values": {
                      "description": "Disallow redundant values in shorthand properties",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    }
                  }
                },
                "string": {
                  "properties": {
                    "string-no-newline": {
                      "description": "Disallow (unescaped) newlines in strings",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    },
                    "string-quotes": {
                      "description": "Specify single or double quotes around strings",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/singleDoubleRule"
                    }
                  }
                },
                "stylelintDisableComment": {
                  "properties": {
                    "stylelint-disable-reason": {
                      "description": "Require a reason comment before or after `stylelint-disable` comments",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "always-before",
                            "always-after",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "always-before",
                                  "always-after",
                                  {}
                                ]
                              },
                              {
                                "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "time": {
                  "properties": {
                    "time-no-imperceptible": {
                      "description": "Disallow `animation` and `transition` less than or equal to 100ms",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    }
                  }
                },
                "unit": {
                  "properties": {
                    "unit-blacklist": {
                      "description": "Specify a blacklist of disallowed units",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/unitRule"
                    },
                    "unit-case": {
                      "description": "Specify lowercase or uppercase for units",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/lowerUpperRule"
                    },
                    "unit-no-unknown": {
                      "description": "Disallow unknown units",
                      "type": [
                        "null",
                        "boolean",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "boolean",
                          "enum": [
                            true,
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "boolean",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "boolean",
                                "enum": [
                                  true,
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignoreUnits": {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "unit-whitelist": {
                      "description": "Specify a whitelist of allowed units",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/unitRule"
                    }
                  }
                },
                "value": {
                  "properties": {
                    "value-keyword-case": {
                      "description": "Specify lowercase or uppercase for keywords values",
                      "type": [
                        "null",
                        "string",
                        "array"
                      ],
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "lower",
                            "upper",
                            []
                          ]
                        },
                        {
                          "type": "array",
                          "minItems": 2,
                          "maxItems": 2,
                          "uniqueItems": true,
                          "items": {
                            "type": [
                              "string",
                              "object"
                            ],
                            "anyOf": [
                              {
                                "type": "string",
                                "enum": [
                                  "lower",
                                  "upper",
                                  {}
                                ]
                              },
                              {
                                "type": "object",
                                "allOf": [
                                  {
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/coreRule"
                                  }
                                ],
                                "properties": {
                                  "ignoreKeywords": {
                                    "description": "Ignore case of keywords values",
                                    "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "value-no-vendor-prefix": {
                      "description": "Disallow vendor prefixes for values",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                    }
                  }
                },
                "valueList": {
                  "properties": {
                    "value-list-comma-newline-after": {
                      "description": "Require a newline or disallow whitespace after the commas of value lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "value-list-comma-newline-before": {
                      "description": "Require a newline or disallow whitespace before the commas of value lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/newlineRule"
                    },
                    "value-list-comma-space-after": {
                      "description": "Require a single space or disallow whitespace after the commas of value lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "value-list-comma-space-before": {
                      "description": "Require a single space or disallow whitespace before the commas of value lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/spaceRule"
                    },
                    "value-list-max-empty-lines": {
                      "description": "Limit the number of adjacent empty lines within value lists",
                      "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/integerRule"
                    }
                  }
                }
              },
              "properties": {
                "extends": {
                  "description": "Your configuration can extend an existing configuration(s) (whether your own or a third-party config)",
                  "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleStringOrArrayStringRule"
                },
                "plugins": {
                  "description": "Plugins are rules or sets of rules built by the community that support methodologies, toolsets, non-standard CSS features, or very specific use cases",
                  "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleArrayStringRule"
                },
                "customSyntax": {
                  "description": "Specify a custom syntax to use on your code.",
                  "type": "string"
                },
                "overrides": {
                  "description": "Provide rule and behavior overrides for files that match particular glob patterns.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "customSyntax": {
                        "type": "string"
                      },
                      "rules": {
                        "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/allRules"
                      }
                    }
                  }
                },
                "processors": {
                  "description": "Processors are functions that hook into stylelint's pipeline, modifying code on its way into stylelint and modifying results on their way out",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": [
                          {
                            "type": "string"
                          }
                        ],
                        "additionalItems": {
                          "type": "object"
                        }
                      }
                    ]
                  }
                },
                "ignoreDisables": {
                  "description": "Ignore stylelint-disable (e.g. /* stylelint-disable block-no-empty */) comments.",
                  "type": "boolean"
                },
                "ignoreFiles": {
                  "description": "Provide a glob or array of globs to ignore specific files",
                  "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/simpleStringOrArrayStringRule"
                },
                "defaultSeverity": {
                  "description": "The default severity level for all rules that do not have a severity specified in their secondary options",
                  "type": "string",
                  "enum": [
                    "warning",
                    "error"
                  ]
                },
                "reportDescriptionlessDisables": {
                  "description": "Report stylelint-disable comments without a description.",
                  "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                },
                "reportInvalidScopeDisables": {
                  "description": "Report stylelint-disable comments that don't match rules that are specified in the configuration object.",
                  "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                },
                "reportNeedlessDisables": {
                  "description": "Report stylelint-disable comments that don't actually match any lints that need to be disabled",
                  "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/booleanRule"
                },
                "rules": {
                  "$ref": "#/properties/nodejs/properties/package.json/properties/stylelint/definitions/allRules"
                }
              },
              "title": "JSON schema for the Stylelint configuration files",
              "type": "object"
            },
            "ava": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "additionalProperties": false,
              "definitions": {
                "path": {
                  "type": "string",
                  "minLength": 1
                },
                "array-of-strings": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "array-of-paths": {
                  "type": "array",
                  "items": {
                    "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/path"
                  }
                }
              },
              "description": "Configuration Schema for the JavaScript test runner AVA",
              "properties": {
                "files": {
                  "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/array-of-paths",
                  "description": "An array of glob patterns to select test files. Files with an underscore prefix are ignored. By default only selects files with `cjs`, `mjs` & `js` extensions, even if the pattern matches other files. Specify `extensions` to allow other file extensions"
                },
                "ignoredByWatcher": {
                  "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/array-of-paths",
                  "description": "An array of glob patterns to match files that, even if changed, are ignored by the watcher"
                },
                "match": {
                  "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/array-of-paths",
                  "description": "Not typically useful in the `package.json` configuration, but equivalent to specifying `--match` on the CLI"
                },
                "cache": {
                  "type": "boolean",
                  "default": true,
                  "description": "Defaults to `true` to cache compiled files under `node_modules/.cache/ava.` If `false`, files are cached in a temporary directory instead"
                },
                "concurrency": {
                  "type": "number",
                  "description": "Max number of test files running at the same time (default: CPU cores)"
                },
                "workerThreads": {
                  "type": "boolean",
                  "default": true,
                  "description": "Use worker threads to run tests (enabled by default). If `false`, tests will run in child processes"
                },
                "failFast": {
                  "type": "boolean",
                  "default": false,
                  "description": "Stop running further tests once a test fails"
                },
                "failWithoutAssertions": {
                  "type": "boolean",
                  "default": true,
                  "description": "If `false`, does not fail a test if it doesn't run assertions"
                },
                "environmentVariables": {
                  "title": "environment variables",
                  "type": "object",
                  "description": "Specifies environment variables to be made available to the tests. The environment variables defined here override the ones from `process.env`",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "tap": {
                  "type": "boolean",
                  "default": false,
                  "description": "If `true`, enables the TAP reporter"
                },
                "verbose": {
                  "type": "boolean",
                  "default": false,
                  "description": "If `true`, enables verbose output (though currently non-verbose output is not supported)"
                },
                "snapshotDir": {
                  "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/path",
                  "description": "Specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location"
                },
                "extensions": {
                  "anyOf": [
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/array-of-strings"
                    },
                    {
                      "title": "extensions",
                      "type": "object",
                      "patternProperties": {
                        "^(c|m)?js$": {
                          "enum": [
                            true
                          ]
                        }
                      },
                      "additionalProperties": {
                        "enum": [
                          "commonjs",
                          "module"
                        ]
                      }
                    }
                  ],
                  "default": [
                    "cjs",
                    "mjs",
                    "js"
                  ],
                  "description": "Extensions of test files. Setting this overrides the default `[\"cjs\", \"mjs\", \"js\"]` value, so make sure to include those extensions in the list. Experimentally you can configure how files are loaded"
                },
                "require": {
                  "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/array-of-paths",
                  "description": "Extra modules to require before tests are run. Modules are required in the worker processes"
                },
                "timeout": {
                  "anyOf": [
                    {
                      "type": "number",
                      "minimum": 0
                    },
                    {
                      "type": "string",
                      "pattern": "^(\\d+)(s|m)$"
                    }
                  ],
                  "default": "10s",
                  "description": "Timeouts in AVA behave differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests. See our timeout documentation for more options"
                },
                "nodeArguments": {
                  "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/array-of-strings",
                  "description": "Configure Node.js arguments used to launch worker processes"
                },
                "utilizeParallelBuilds": {
                  "type": "boolean",
                  "default": true,
                  "description": "If `false`, disable parallel builds (default: `true`)"
                },
                "typescript": {
                  "title": "configuration",
                  "type": "object",
                  "description": "Configures @ava/typescript for projects that precompile TypeScript. Alternatively, you can use `ts-node` to do live testing without transpiling, in which case you shouldn't use the `typescript` property",
                  "properties": {
                    "extensions": {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/ava/definitions/array-of-paths",
                      "default": [
                        "ts"
                      ],
                      "description": "You can configure AVA to recognize additional file extensions as TypeScript (e.g., `[\"ts\", \"tsx\"]` to add partial JSX support). Note that the preserve mode for JSX is not (yet) supported. See also AVA's `extensions` object"
                    },
                    "rewritePaths": {
                      "title": "paths",
                      "type": "object",
                      "description": "AVA searches your entire project for `*.js`, `*.cjs`, `*.mjs` and `*.ts` files (or other extensions you've configured). It will ignore such files found in the `rewritePaths` targets (e.g. `build/`). If you use more specific paths, for instance `build/main/`, you may need to change AVA's `files` configuration to ignore other directories. Paths are relative to your project directory",
                      "patternProperties": {
                        "/$": {
                          "type": "string",
                          "pattern": "/$"
                        }
                      }
                    },
                    "compile": {
                      "enum": [
                        false,
                        "tsc"
                      ],
                      "default": false,
                      "description": "If `false`, AVA will assume you have already compiled your project. If set to `'tsc'`, AVA will run the TypeScript compiler before running your tests. This can be inefficient when using AVA in watch mode"
                    }
                  }
                }
              },
              "title": "AVA Config Schema",
              "type": "object"
            },
            "release": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "definitions": {
                "branch-object": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "channel": {
                      "type": "string"
                    },
                    "range": {
                      "type": "string"
                    },
                    "prerelease": {
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "extends": {
                  "description": "List of modules or file paths containing a shareable configuration. If multiple shareable configurations are set, they will be imported in the order defined with each configuration option taking precedence over the options defined in a previous shareable configuration",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "branches": {
                  "description": "The branches on which releases should happen.",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/release/definitions/branch-object"
                    },
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/properties/nodejs/properties/package.json/properties/release/definitions/branch-object"
                          }
                        ]
                      }
                    }
                  ],
                  "default": [
                    "+([0-9])?(.{+([0-9]),x}).x",
                    "master",
                    "next",
                    "next-major",
                    {
                      "name": "beta",
                      "prerelease": true
                    },
                    {
                      "name": "alpha",
                      "prerelease": true
                    }
                  ]
                },
                "repositoryUrl": {
                  "type": "string",
                  "description": "The git repository URL"
                },
                "tagFormat": {
                  "type": "string",
                  "description": "The Git tag format used by semantic-release to identify releases. The tag name is generated with Lodash template and will be compiled with the version variable.",
                  "default": "v${version}"
                },
                "plugins": {
                  "type": "array",
                  "description": "Define the list of plugins to use. Plugins will run in series, in the order defined",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array"
                      }
                    ]
                  },
                  "default": [
                    "@semantic-release/commit-analyzer",
                    "@semantic-release/release-notes-generator",
                    "@semantic-release/npm",
                    "@semantic-release/github"
                  ]
                },
                "dryRun": {
                  "type": "boolean",
                  "description": "The objective of the dry-run mode is to get a preview of the pending release. Dry-run mode skips the following steps: prepare, publish, success and fail. In addition to this it prints the next version and release notes to the console"
                },
                "ci": {
                  "type": "boolean",
                  "description": "Set to false to skip Continuous Integration environment verifications. This allows for making releases from a local machine",
                  "default": true
                }
              },
              "title": "semantic-release Schema",
              "type": "object"
            },
            "jscpd": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "additionalProperties": false,
              "definitions": {
                "colorPreset": {
                  "enum": [
                    "green",
                    "blue",
                    "red",
                    "yellow",
                    "orange",
                    "purple",
                    "pink",
                    "grey",
                    "gray",
                    "cyan",
                    "black"
                  ]
                },
                "colorHex": {
                  "type": "string",
                  "pattern": "([0-9a-fA-F]{3}){1,2}"
                },
                "color": {
                  "oneOf": [
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/jscpd/definitions/colorPreset"
                    },
                    {
                      "$ref": "#/properties/nodejs/properties/package.json/properties/jscpd/definitions/colorHex"
                    }
                  ]
                },
                "format": {
                  "enum": [
                    "abap",
                    "actionscript",
                    "ada",
                    "apacheconf",
                    "apl",
                    "applescript",
                    "arduino",
                    "arff",
                    "asciidoc",
                    "asm6502",
                    "aspnet",
                    "autohotkey",
                    "autoit",
                    "bash",
                    "basic",
                    "batch",
                    "bison",
                    "brainfuck",
                    "bro",
                    "c",
                    "c-header",
                    "clike",
                    "clojure",
                    "coffeescript",
                    "comments",
                    "cpp",
                    "cpp-header",
                    "crystal",
                    "csharp",
                    "csp",
                    "css-extras",
                    "css",
                    "d",
                    "dart",
                    "diff",
                    "django",
                    "docker",
                    "eiffel",
                    "elixir",
                    "elm",
                    "erb",
                    "erlang",
                    "flow",
                    "fortran",
                    "fsharp",
                    "gedcom",
                    "gherkin",
                    "git",
                    "glsl",
                    "go",
                    "graphql",
                    "groovy",
                    "haml",
                    "handlebars",
                    "haskell",
                    "haxe",
                    "hpkp",
                    "hsts",
                    "http",
                    "ichigojam",
                    "icon",
                    "inform7",
                    "ini",
                    "io",
                    "j",
                    "java",
                    "javascript",
                    "jolie",
                    "json",
                    "jsx",
                    "julia",
                    "keymap",
                    "kotlin",
                    "latex",
                    "less",
                    "liquid",
                    "lisp",
                    "livescript",
                    "lolcode",
                    "lua",
                    "makefile",
                    "markdown",
                    "markup",
                    "matlab",
                    "mel",
                    "mizar",
                    "monkey",
                    "n4js",
                    "nasm",
                    "nginx",
                    "nim",
                    "nix",
                    "nsis",
                    "objectivec",
                    "ocaml",
                    "opencl",
                    "oz",
                    "parigp",
                    "pascal",
                    "perl",
                    "php",
                    "plsql",
                    "powershell",
                    "processing",
                    "prolog",
                    "properties",
                    "protobuf",
                    "pug",
                    "puppet",
                    "pure",
                    "python",
                    "q",
                    "qore",
                    "r",
                    "reason",
                    "renpy",
                    "rest",
                    "rip",
                    "roboconf",
                    "ruby",
                    "rust",
                    "sas",
                    "sass",
                    "scala",
                    "scheme",
                    "scss",
                    "smalltalk",
                    "smarty",
                    "soy",
                    "sql",
                    "stylus",
                    "swift",
                    "tap",
                    "tcl",
                    "textile",
                    "tsx",
                    "tt2",
                    "twig",
                    "typescript",
                    "vbnet",
                    "velocity",
                    "verilog",
                    "vhdl",
                    "vim",
                    "visual-basic",
                    "wasm",
                    "url",
                    "wiki",
                    "xeora",
                    "xojo",
                    "xquery",
                    "yaml"
                  ]
                }
              },
              "properties": {
                "minLines": {
                  "type": "integer",
                  "default": 5,
                  "description": "minimum size of code block in lines to check for duplication"
                },
                "maxLines": {
                  "type": "integer",
                  "default": 1000,
                  "description": "maximum size of source file in lines to check for duplication"
                },
                "maxSize": {
                  "anyOf": [
                    {
                      "type": "string",
                      "pattern": "^\\+?[0-9]+(\\.[0-9]+)? *[kKmMgGtTpP][bB]$"
                    },
                    {
                      "type": "integer"
                    }
                  ],
                  "default": "100kb",
                  "description": "maximum size of source file in bytes to check for duplication (e.g.,: 1kb, 1mb, 120kb)"
                },
                "minTokens": {
                  "type": "integer",
                  "default": 50,
                  "description": "minimum size of code block in tokens to check for duplication"
                },
                "threshold": {
                  "type": "number",
                  "description": "maximum allowed duplicate lines expressed as a percentage; exit with error and exit code 1 when threshold exceeded"
                },
                "formatsExts": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "default": {},
                  "description": "custom mapping from formats to file extensions (default: https://github.com/kucherenko/jscpd/blob/master/packages/tokenizer/src/formats.ts); see https://github.com/kucherenko/jscpd/blob/master/supported_formats.md"
                },
                "output": {
                  "type": "string",
                  "default": "./report",
                  "description": "path to directory for non-console reports"
                },
                "path": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "paths that should be included in duplicate detection (default: [process.cwd()])"
                },
                "pattern": {
                  "type": "string",
                  "default": "**/*",
                  "description": "glob pattern for files that should be included in duplicate detection (e.g., **/*.txt); only used to filter directories configured via path option"
                },
                "ignorePattern": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [],
                  "description": "ignore code blocks matching these regular expressions"
                },
                "mode": {
                  "enum": [
                    "mild",
                    "strict",
                    "weak"
                  ],
                  "default": "mild",
                  "description": "mode of detection quality; see https://github.com/kucherenko/jscpd/blob/master/packages/jscpd/README.md#mode"
                },
                "ignore": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [],
                  "description": "glob pattern for files that should be excluded from duplicate detection"
                },
                "format": {
                  "type": "array",
                  "items": {
                    "$ref": "#/properties/nodejs/properties/package.json/properties/jscpd/definitions/format"
                  },
                  "description": "list of formats for which to detect duplication (default: all); see https://github.com/kucherenko/jscpd/blob/master/supported_formats.md"
                },
                "store": {
                  "enum": [
                    "leveldb",
                    "redis"
                  ],
                  "description": "store used to collect information about code (default: in-memory store); install @jscpd/leveldb-store and use leveldb for big repositories"
                },
                "reporters": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "xml",
                      "json",
                      "csv",
                      "markdown",
                      "consoleFull",
                      "html",
                      "console",
                      "silent",
                      "threshold",
                      "xcode"
                    ]
                  },
                  "default": [
                    "console"
                  ],
                  "description": "a list of reporters to use to output information about duplication; see https://github.com/kucherenko/jscpd/blob/master/packages/jscpd/README.md#reporters"
                },
                "blame": {
                  "type": "boolean",
                  "default": false,
                  "description": "get information about authors and dates of duplicated blocks from Git"
                },
                "silent": {
                  "type": "boolean",
                  "default": false,
                  "description": "do not write duplicate detection progress and result to console"
                },
                "verbose": {
                  "type": "boolean",
                  "default": false,
                  "description": "show full information during duplicate detection"
                },
                "absolute": {
                  "type": "boolean",
                  "default": false,
                  "description": "use absolute paths in reports"
                },
                "noSymLinks": {
                  "type": "boolean",
                  "default": false,
                  "description": "do not follow symlinks"
                },
                "skipLocal": {
                  "type": "boolean",
                  "default": false,
                  "description": "skip duplicates within folders; just detect cross-folder duplicates"
                },
                "ignoreCase": {
                  "type": "boolean",
                  "default": false,
                  "description": "ignore case of symbols in code (experimental)"
                },
                "gitignore": {
                  "type": "boolean",
                  "default": false,
                  "description": "ignore all files from .gitignore file"
                },
                "reportersOptions": {
                  "type": "object",
                  "default": {},
                  "additionalProperties": false,
                  "properties": {
                    "badge": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "output path for duplication level badge (default: path.join(output, 'jscpd-badge.svg'))"
                        },
                        "label": {
                          "type": "string",
                          "default": "Copy/Paste",
                          "description": "badge subject text (URL-encoding needed for spaces or special characters)"
                        },
                        "labelColor": {
                          "$ref": "#/properties/nodejs/properties/package.json/properties/jscpd/definitions/color",
                          "default": "555",
                          "description": "badge label color (name or RGB code without #); see https://github.com/badgen/badgen/blob/master/src/color-presets.ts"
                        },
                        "status": {
                          "type": "string",
                          "description": "badge value text (URL-encoding needed for spaces or special characters, default: duplication %)"
                        },
                        "color": {
                          "$ref": "#/properties/nodejs/properties/package.json/properties/jscpd/definitions/color",
                          "description": "badge color (name or RGB code without #, default: green if beneath threshold, red if above threshold, grey if threshold not set); see https://github.com/badgen/badgen/blob/master/src/color-presets.ts"
                        },
                        "style": {
                          "enum": [
                            "flat",
                            "classic"
                          ],
                          "default": "classic",
                          "description": "badge look: flat or classic"
                        },
                        "icon": {
                          "type": "string",
                          "description": "URL for icon to display in front of badge subject text (e.g., data:image/svg+xml;base64,...)"
                        },
                        "iconWidth": {
                          "type": "number",
                          "default": 13,
                          "description": "SVG width of icon to display in front of badge subject text; set this if icon is not square"
                        },
                        "scale": {
                          "type": "number",
                          "default": 1,
                          "description": "size of badge relative to default of 1"
                        }
                      }
                    }
                  }
                },
                "exitCode": {
                  "type": "integer",
                  "default": 0,
                  "description": "exit code to use when at least one duplicate code block is detected but threshold is not exceeded"
                }
              },
              "type": "object"
            }
          },
          "anyOf": [
            {
              "type": "object",
              "not": {
                "required": [
                  "bundledDependencies",
                  "bundleDependencies"
                ]
              }
            },
            {
              "type": "object",
              "not": {
                "required": [
                  "bundleDependencies"
                ]
              },
              "required": [
                "bundledDependencies"
              ]
            },
            {
              "type": "object",
              "not": {
                "required": [
                  "bundledDependencies"
                ]
              },
              "required": [
                "bundleDependencies"
              ]
            }
          ]
        },
        "version": {
          "description": "NodeJS version",
          "type": "number",
          "enum": [
            20,
            18,
            16
          ]
        },
        "command": {
          "description": "Command to start application",
          "type": "string"
        }
      },
      "required": [
        "package.json",
        "version",
        "command"
      ]
    }
  },
  "required": [
    "nodejs"
  ]
}